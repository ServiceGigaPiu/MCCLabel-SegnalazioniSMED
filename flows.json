[
    {
        "id": "bdc10eb0bfc2c224",
        "type": "tab",
        "label": "main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c1d4418a6f1f1693",
        "type": "tab",
        "label": "Query PLC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "687893cfe8ebd28b",
        "type": "tab",
        "label": "Query Db",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "76b05f87a5290cf6",
        "type": "tab",
        "label": "UIB req/resp",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f325c0384ffbb0ed",
        "type": "tab",
        "label": "Dev tools",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b9377575097a37a3",
        "type": "tab",
        "label": "Query S7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04b1005a90c8a3c5",
        "type": "group",
        "z": "bdc10eb0bfc2c224",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f5e7d5b2511d841",
            "36e2ae0472d2cbf9",
            "023aee864dfe060e",
            "53931ce2b746b2a8",
            "905ffcbaa899f13b",
            "5c240797a607a72e",
            "ba95acef3cf1d482",
            "899cc7f63c34db85",
            "5f11b4017ea0a53a",
            "a8c52cb41a3ce465",
            "ee7ff068761aee92"
        ],
        "x": 59,
        "y": 79,
        "w": 1142,
        "h": 438
    },
    {
        "id": "da77e7609f045ab9",
        "type": "group",
        "z": "c1d4418a6f1f1693",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "168519c137046930",
            "f1103d4e21a73fdc",
            "5857ac58e83b5a22",
            "99f290d09a2d605c",
            "3da7bb8fa229a82f",
            "11103fa07a72872e",
            "905242d162db1caf",
            "3e316755168c06f6",
            "cfefef80e9b194d1",
            "fcf4dd1dc8f9d063",
            "e94bbfdfafbd2c8d",
            "e93ee763df9c6153",
            "05155140ca77bf61",
            "d20bfd7ca3a2b214",
            "a6557d27a4ccccf0",
            "9bc9b1bd765143ca",
            "1b762b6676faa61a",
            "f4917f08c9c0b1a1",
            "372526d485ca01db",
            "b9f8339f0bddcb39"
        ],
        "x": 84,
        "y": 1844,
        "w": 1012,
        "h": 342
    },
    {
        "id": "2cf1ebc3c7549361",
        "type": "group",
        "z": "c1d4418a6f1f1693",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1139a9eb6fcaa7a1",
            "77c107f0b5ae5214",
            "6b21ca10d112452a",
            "8e489dedabd31f4f",
            "0b9842e3937bb61a",
            "ba73114a49b89f60",
            "3797e914cd36dd8a",
            "316bce5bb99571f1",
            "e4b56d5c220355cd",
            "a4d6f2321520f0f5"
        ],
        "x": 59,
        "y": 1334,
        "w": 932,
        "h": 282
    },
    {
        "id": "5f741e9d0e05f1e2",
        "type": "group",
        "z": "c1d4418a6f1f1693",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e788bf33f7250b4e",
            "734a6280c896ee84",
            "042d220310f4d201",
            "a4ea3b73128da3ca",
            "f31346e5c189cc0d",
            "f8f56d1dd1270dfc",
            "e3c72d4f0636519a",
            "db5d63224303cb8e",
            "cba181767f3c556b",
            "d8e171d74cfb3f15",
            "fae481120ae1669e",
            "829cb3bdb9fa3035",
            "586a6d5aedbb7697",
            "8d2faa48c7f2974b",
            "70f0e9dd596f13dd",
            "e448cf338d7ce60a",
            "3d7f018e03cb4a74",
            "8738217e5c0cf07c",
            "ceacba052417233a",
            "b375a71d547e53ec",
            "761d54a566d15f19",
            "b7e4f98ef65e21b7",
            "e548c0432c3393fb",
            "d0d9b9c907a6dfeb",
            "bacfab2b6aa8f62e",
            "94ccb2ba33d6be90",
            "3ca71da5dcaca581"
        ],
        "x": 59,
        "y": 364,
        "w": 1122,
        "h": 402
    },
    {
        "id": "58b6778550aa8a70",
        "type": "group",
        "z": "687893cfe8ebd28b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d270c3de05a36e77",
            "5228452a6339fa55",
            "c1c4729ef16ce22a",
            "cd41c852c2e5f702",
            "1a8c704b1226b50f",
            "e6adaf06802e51f3",
            "3180fd0a99128c28",
            "6317fcd428d05e09",
            "50b758f18740c23d"
        ],
        "x": 524,
        "y": 94,
        "w": 687,
        "h": 172
    },
    {
        "id": "31f4b8716c51f385",
        "type": "group",
        "z": "76b05f87a5290cf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d83b9961b3c5fb9e",
            "2c415eda999050f1",
            "e90fd6ebd8e9a846",
            "63cb5672c06fad4e",
            "a2e783d72e228d3a"
        ],
        "x": 109,
        "y": 1099,
        "w": 552,
        "h": 232
    },
    {
        "id": "6a1c50c04535e13a",
        "type": "group",
        "z": "76b05f87a5290cf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "71bdf71b7ab73ed4",
            "29da4c340c1c0f16",
            "c9da44f4b5572f7d",
            "0c33f8d537e42c41",
            "6b19a1a58b2b90d0",
            "16c03e6dc270a0a8",
            "64690dd246039799",
            "3e1fc30868d42f0c",
            "d23c81a0325ee4c4"
        ],
        "x": 259,
        "y": 64,
        "w": 872,
        "h": 172
    },
    {
        "id": "a9df91edd9e67095",
        "type": "group",
        "z": "76b05f87a5290cf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "42b44a1c5d242838",
            "2007df0d560bc337",
            "d1418df470ae9fa4"
        ],
        "x": 83,
        "y": 274,
        "w": 1139,
        "h": 603
    },
    {
        "id": "5bcc1c5114f00806",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15d1712c48b60144",
            "ae29b121eba5b701",
            "ac81c47e04b26af5",
            "252a1e640d0f1c0b",
            "4cdb3c3bf46563d8",
            "3a219ed0af97dddf",
            "f17b02b8bcb19efd",
            "c28bf5814e72a1da",
            "9ee36af3597985b4",
            "dfe4876ea0615980",
            "cca09e5584ef886c",
            "41547953e1174a36",
            "7d815369a4f9dec4",
            "c8ee96d3de3d3f40",
            "71b7faf956909c17",
            "649bb151d51e764d",
            "13ab8d445c1e80e2",
            "55e7b1fcf215488e"
        ],
        "x": 104,
        "y": 1599,
        "w": 772,
        "h": 392
    },
    {
        "id": "042f83e60bf4b2b4",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e02b6f382a6c8813",
            "9056d3c89eaf484d",
            "d4e564eac59f8117"
        ],
        "x": 63,
        "y": 199,
        "w": 1124,
        "h": 603
    },
    {
        "id": "9bcec7222119e8a3",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3cf1218795abc823",
            "f6905ffb8eab6a25",
            "2b0d893e266ba428"
        ],
        "x": 754,
        "y": 1024,
        "w": 307,
        "h": 82
    },
    {
        "id": "59b9575558a87ab8",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a5c6292ed1672889",
            "83ea5f07872402eb",
            "732e9e9a5be95374",
            "06e8b2a3bf45c64b",
            "e16f5eb91fb5c4b4"
        ],
        "x": 789,
        "y": 859,
        "w": 477,
        "h": 127
    },
    {
        "id": "ffe7d6539591cabf",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4589e135e62180d5",
            "78d83f5060d67324",
            "f60ed334182c339f",
            "3a58a38948ea94e8",
            "5f7d9434ee851d46",
            "89ec3e26ebc5ea38",
            "f7946e855cb7af23",
            "77190d99789c8205",
            "751f5980939d113e",
            "3c0c7d2ea6d76d9f",
            "912b13320bc74a21",
            "f49802da0ea96466",
            "a2d84d711435defe",
            "a387a9d3ceb733c8",
            "eb4ab9c687c85a83",
            "8394e156f1e2488e",
            "830ffb7ad83476f7",
            "aa246ddee430ee27",
            "35e1d011498c72cd",
            "7e5e3a6761c37063",
            "140b055fd622ecf2"
        ],
        "x": 34,
        "y": 1099,
        "w": 1377,
        "h": 382
    },
    {
        "id": "6f1ada98f5867046",
        "type": "group",
        "z": "b9377575097a37a3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "454cf93fb55a37e1",
            "bbc0b268ea1e4b05",
            "ac0360013a3bc782",
            "d559e44b39c59c2e",
            "c9aaf418d77c2d5e"
        ],
        "x": 619,
        "y": 1139,
        "w": 382,
        "h": 122
    },
    {
        "id": "a02047ec82263155",
        "type": "group",
        "z": "b9377575097a37a3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b5204d64c998cc1f",
            "21fbf510e4cbe1d4",
            "4debd21357a01bc6",
            "f3f7f42487fb6981",
            "3cfd59900276e4c7",
            "69a6569de8f183d7",
            "b1111e1050653ac6"
        ],
        "x": 119,
        "y": 54,
        "w": 712,
        "h": 227
    },
    {
        "id": "fc6c8637d9b4aad0",
        "type": "group",
        "z": "b9377575097a37a3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "351ad075abbac370",
            "552b1632304bcb80",
            "e9c08298ab7f350b",
            "f37a0518b44c5219",
            "fa46f22c945d1162",
            "65e1635fb1a50f25",
            "8c85da46fbc8e587",
            "1d39b0493c890778",
            "81d3b5c8c04e7de4",
            "25a8041d1656d36e",
            "b779e74b5a16fa1b",
            "b524fe2e5e6aad80",
            "b5ac12a94b58dff0",
            "82fd1d1191fd6dc3",
            "ec556ce00fbd23ad",
            "7a404f64ad01274d",
            "1caf9f4b81091c0d",
            "f04944e0439ccc47",
            "7e77562f0cc30659",
            "9cabc5e7732aff01",
            "37ea04af9df3d34f"
        ],
        "x": 1189,
        "y": 744,
        "w": 1232,
        "h": 307
    },
    {
        "id": "6468e314d57e838e",
        "type": "group",
        "z": "b9377575097a37a3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "df9088f254e94c5e",
            "19899f2d110fd419",
            "716d4b0a2eeac322",
            "f9ab78df7bf3b33e",
            "d0d35188ca977ce0"
        ],
        "x": 88,
        "y": 1279,
        "w": 1559,
        "h": 1368
    },
    {
        "id": "3d77674313c033de",
        "type": "group",
        "z": "b9377575097a37a3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c46b98a862a1ab60",
            "c7e08d3cbb0142be",
            "41df5591bfa012dd",
            "c82c903f9464cdcc",
            "ffe8c4b38dc5356f",
            "cbee46675b660f6a",
            "bf7e73d0cd5dbe88",
            "49087488e8ed7662"
        ],
        "x": 99,
        "y": 739,
        "w": 692,
        "h": 242
    },
    {
        "id": "22fa3a13397fe4f2",
        "type": "group",
        "z": "b9377575097a37a3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bd6109d96baea39b",
            "c995137d4d361008",
            "9111dea45f892157",
            "45d520a6fb72eee7",
            "33c2c24b51f576c7",
            "2b00129f3f91c856",
            "a83660b5da3a1451",
            "68103b2c84b029a5",
            "ef2a49517ea8e8ce",
            "fa52f4b698761fb6",
            "21e833d404c37992",
            "47a51a5c770177f1",
            "f8197dfe83065776",
            "d0e35598fdc88529",
            "22bd8688afb73c9f",
            "17746ac1098a88b0",
            "f428ef7f0a8a8a80",
            "e085918b8aa8e446",
            "c5ed6815fba11d03",
            "870da2506eac28bc",
            "24b155b8ecaf80fd"
        ],
        "x": 279,
        "y": 319,
        "w": 1102,
        "h": 372
    },
    {
        "id": "5c240797a607a72e",
        "type": "group",
        "z": "bdc10eb0bfc2c224",
        "g": "04b1005a90c8a3c5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fce87b3f2ec4f837",
            "10f5a5d0b1289efe",
            "1bc33f240d04f6d7",
            "ce9547c90f0ade2e",
            "ea4a988a0afb4c37",
            "9f21b28345764dd0",
            "87b58b85df970e28"
        ],
        "x": 499,
        "y": 319,
        "w": 667,
        "h": 172
    },
    {
        "id": "ba95acef3cf1d482",
        "type": "group",
        "z": "bdc10eb0bfc2c224",
        "g": "04b1005a90c8a3c5",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "40d2a39b57f59f1d",
            "8615db9870d9365b",
            "812eb6cf9a5a2c7a"
        ],
        "x": 309,
        "y": 184,
        "w": 277,
        "h": 112
    },
    {
        "id": "e4b56d5c220355cd",
        "type": "group",
        "z": "c1d4418a6f1f1693",
        "g": "2cf1ebc3c7549361",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7a0bd75fedb9f8d1",
            "cae2260813cda61f",
            "28569d65c3243a38"
        ],
        "x": 309,
        "y": 1414,
        "w": 312,
        "h": 82
    },
    {
        "id": "2007df0d560bc337",
        "type": "group",
        "z": "76b05f87a5290cf6",
        "g": "a9df91edd9e67095",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f8d4de8ef89ccdb9",
            "463f910d3a8a7f6b",
            "f024f89d70efae3e",
            "1b78b56bf54d8ceb",
            "8da1028258065abd",
            "22b257b1d1caa0d7",
            "ca2b9f6d1617d974",
            "27fd41b42aa48c45",
            "8a869fbf2653f1a4",
            "790069aedc4c5ebe"
        ],
        "x": 359,
        "y": 679,
        "w": 807,
        "h": 172
    },
    {
        "id": "d1418df470ae9fa4",
        "type": "group",
        "z": "76b05f87a5290cf6",
        "g": "a9df91edd9e67095",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7103451c8f1ce3d3",
            "d6a1db03463f5561",
            "8c87150121a07852",
            "9eae3823833d4d69",
            "3f92af885fe4a9d4",
            "fa5fe09d4f7a35d0",
            "d0045f77b9afb1af"
        ],
        "x": 109,
        "y": 379,
        "w": 1087,
        "h": 168
    },
    {
        "id": "e02b6f382a6c8813",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "g": "042f83e60bf4b2b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6e11ca5816678aff",
            "eaa055ba0bfe8209",
            "92f9ab29a8b8f215",
            "f7aa3a5ee94581d8",
            "465a56cb5ae37a7b",
            "4b32101b94305fad",
            "eca3f783e09f6088",
            "7eec56878e74f81d",
            "0fed6df359c670f3",
            "8a7581d12692fcfa",
            "6abeeffb9f17c15c",
            "1464ee495f119867",
            "79cb428099fa1515",
            "fd596e236db59b07"
        ],
        "x": 89,
        "y": 544,
        "w": 1072,
        "h": 232
    },
    {
        "id": "d4e564eac59f8117",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "g": "042f83e60bf4b2b4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b757185d480921ba",
            "66fc5d7cfed02395",
            "a7c280bcddb31c7e",
            "e0e7d487cb6155da",
            "40aa2bf78c7edcb3",
            "5f6c10280d9d54a1",
            "131215b1356c2711",
            "0a569519a6946703",
            "e0da6226ebca68e1",
            "3d6b849bfb2b2f51",
            "2835c333a07183bd",
            "fd379269ea194a8c",
            "decb29c9608e58af",
            "d654a92c108d7cf7",
            "3812bcc095cbdfe5",
            "6bd020121fe4161b"
        ],
        "x": 89,
        "y": 304,
        "w": 1057,
        "h": 202
    },
    {
        "id": "7e5e3a6761c37063",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "g": "ffe7d6539591cabf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b116d599b6b0916d",
            "f1ac1cecd9de5f7a",
            "4c4668d1d8f3b4a4"
        ],
        "x": 519,
        "y": 1309,
        "w": 298,
        "h": 82
    },
    {
        "id": "140b055fd622ecf2",
        "type": "group",
        "z": "f325c0384ffbb0ed",
        "g": "ffe7d6539591cabf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c5220d97a1ee9a7d",
            "7905b0dc5437c385",
            "1df35f685bbae5dc"
        ],
        "x": 1009,
        "y": 1234,
        "w": 292,
        "h": 82
    },
    {
        "id": "df9088f254e94c5e",
        "type": "group",
        "z": "b9377575097a37a3",
        "g": "6468e314d57e838e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "72b60ffb9a9036c8",
            "b90197333a8243e5",
            "720243a5e49de53d",
            "e521c584e11bfcc4",
            "8c79e600376c46de",
            "4d725a406e8b7475",
            "647159f3ed671018"
        ],
        "x": 134,
        "y": 1774,
        "w": 892,
        "h": 172
    },
    {
        "id": "19899f2d110fd419",
        "type": "group",
        "z": "b9377575097a37a3",
        "g": "6468e314d57e838e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f0334309524bc22b",
            "9347d860a9df1cea",
            "6dd800ca3a398c60",
            "85bbcfb635da5688",
            "a39c33d989cf670b",
            "2bb00c70116db4b3",
            "f2784c01e5c99dc6",
            "fbeadcead2a7ca1c",
            "3c4bfe32b15bc405",
            "cdaf25d739c9fe5d",
            "81fd06535c53fa28",
            "e31ca3afb2ea7f0b",
            "b2bee83e7260211a",
            "80e89aead4ab3d75",
            "5b485b54db9fe1f2",
            "23871617ee198621"
        ],
        "x": 114,
        "y": 2339,
        "w": 1202,
        "h": 282
    },
    {
        "id": "716d4b0a2eeac322",
        "type": "group",
        "z": "b9377575097a37a3",
        "g": "6468e314d57e838e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "35d354408fae7539",
            "6a62873b4e46bbd8",
            "9f86718937d29bba",
            "89acac1fd8a887f1",
            "12771038e847a88a",
            "e33aa7e7cbd97b4e",
            "b1ce79e818307751",
            "1c7d69ab9f66b8ca",
            "178cc6bf43de6aad",
            "d331c13fa0d9ea1e",
            "c1a586c2ed4a2cee",
            "2c5766100f1b6b0b",
            "17feef43ab700877"
        ],
        "x": 124,
        "y": 1969,
        "w": 1002,
        "h": 362
    },
    {
        "id": "f9ab78df7bf3b33e",
        "type": "group",
        "z": "b9377575097a37a3",
        "g": "6468e314d57e838e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3f570b4b27989310",
            "85fe0215925f055b",
            "5571157ca53f72d7",
            "2f9978300a1d1790",
            "c574f48718a26b27",
            "d884204c818a7421",
            "b1d2f477e488dda8",
            "0da23baee9865b59",
            "412e396b6f49d506",
            "e9f7760b211c033c",
            "b45436d6c32aec5b",
            "ec925f9cc97d2a35",
            "7275e36794ea0351",
            "14e38cde273d26cc",
            "8e8d43ea58023819",
            "b09126e2defac7b3",
            "08d4c169c375e425",
            "a50d774300049060",
            "bc3b85c3a5989a53",
            "8036e0640623c816",
            "c472dcc87f5170c8",
            "2180a1fb7230451e"
        ],
        "x": 129,
        "y": 1354,
        "w": 1492,
        "h": 382
    },
    {
        "id": "9eae3823833d4d69",
        "type": "group",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5d4e2536bd217ebb",
            "8592536a56dff0ec"
        ],
        "x": 484,
        "y": 439,
        "w": 202,
        "h": 82
    },
    {
        "id": "0fd51b35b0ef24fa",
        "type": "group",
        "z": "c1d4418a6f1f1693",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d66367b49a88fb46",
            "25449877336f3f5c",
            "6b7b42e7a9a2ca07",
            "592ab95d2bbeaf0b",
            "5da6337e54d3d370",
            "a6da843d5aa39ebd",
            "2f740e6f90340d55"
        ],
        "x": 114,
        "y": 49,
        "w": 482,
        "h": 217
    },
    {
        "id": "8f5e7d5b2511d841",
        "type": "link call",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "Query PLC",
        "links": [
            "064df6995fe637f2"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 505,
        "y": 120,
        "wires": [
            [
                "023aee864dfe060e"
            ]
        ]
    },
    {
        "id": "36e2ae0472d2cbf9",
        "type": "function",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "send Query",
        "func": "let query = global.get(\"query\");\n/* -- query cheatsheet --\n    \"between\": function (from:hexStr, to:hexStr, sequenceName = \"\") \n    \"from\": function (address:num = 0, quantity:num = 2) \n    \"getDefault\": this.from\n*/\n//query Potenza Attiva di inverter, analizz.rete pm3250(p1), analizz.rete pm500(pterra)\n    //sono 3 query separate, toreneranno asincornamente\nfor (let addr of [4454, 2532, 2322])\n    node.send(query.from(addr,2),false);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 120,
        "wires": [
            [
                "8f5e7d5b2511d841"
            ]
        ]
    },
    {
        "id": "023aee864dfe060e",
        "type": "function",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "convert and combine",
        "func": "const query = global.get(\"query\");\n\nlet results = context.get(\"results\") ?? {length:0};\nlet buf = msg.payload.buffer;\n\n//convert buffer to typed var\n    //bcs vars are all REAL -> using default instead of separate cases\nlet val;\nquery.plcMem2LitEnd(buf);\nswitch(msg.modbusRequest.address){\n    default: /* REAL */{\n        val = buf.readFloatLE(0);\n    }\n}\nresults[msg.modbusRequest.address] = val;\nresults.length++;\n\n//wait for all 3 queries to return, then send them as single object {address : val, ..} \nif(results.length == 3){\n    msg.payload = results;\n    context.set(\"results\", { length: 0 });\n    return {\n        payload:{\n            unixMs: Date.now(),\n            pAttTot_inv: results[4454],\n            pAttTot_pm3250: results[2532],\n            pAttTot_pm500: results[2322]\n        }\n    };\n}\nelse{\n    context.set(\"results\", results);\n    return\n}\n\n/* \n//query Potenza Attiva di inverter, analizz.rete pm3250(p1), analizz.rete pm500(pterra)\nfor (let addr of [4454, 2532, 2322])\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 685,
        "y": 120,
        "wires": [
            [
                "905ffcbaa899f13b",
                "10f5a5d0b1289efe",
                "8615db9870d9365b"
            ]
        ]
    },
    {
        "id": "53931ce2b746b2a8",
        "type": "inject",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "poll 30s",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 165,
        "y": 120,
        "wires": [
            [
                "36e2ae0472d2cbf9"
            ]
        ]
    },
    {
        "id": "905ffcbaa899f13b",
        "type": "debug",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 925,
        "y": 120,
        "wires": []
    },
    {
        "id": "fce87b3f2ec4f837",
        "type": "comment",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "historicize data",
        "info": "",
        "x": 610,
        "y": 360,
        "wires": []
    },
    {
        "id": "10f5a5d0b1289efe",
        "type": "delay",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "25",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 605,
        "y": 405,
        "wires": [
            [
                "1bc33f240d04f6d7"
            ]
        ]
    },
    {
        "id": "1bc33f240d04f6d7",
        "type": "function",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "storeThem",
        "func": "\nconst mysql = global.get(\"mysql\");\n//const props[\"pAttTot_inv\", \"pAttTot_pm3250\", \"pAttTot_pm500\"]\n//msg.payload = {addr:val , .. , ..}\nfunction errorMsg(p){\n    node.warn({err:`cannot to store prop ${p} with value type ${typeof(msg.payload[p])}`});\n}\n//keep last good one, to use as defValue if undefined\nif (msg.payload.pAttTot_inv !== null && msg.payload.pAttTot_inv !== undefined)\n    context.set(\"pAttTot_inv\", msg.payload.pAttTot_inv);\nelse\n    errorMsg(\"pAttTot_inv\");\nif (msg.payload.pAttTot_pm3250 !== null && msg.payload.pAttTot_pm3250 !== undefined)\n    context.set(\"pAttTot_pm3250\", msg.payload.pAttTot_pm3250);\nelse\n    errorMsg(\"pAttTot_pm3250\");\nif (msg.payload.pAttTot_pm500 !== null && msg.payload.pAttTot_pm500 !== undefined)\n    context.set(\"pAttTot_pm500\", msg.payload.pAttTot_pm500);\nelse\n    errorMsg(\"pAttTot_pm500\");\n\n//create query\n    //pm500 is sometime undefined (?)\nlet query = {\n    topic: mysql.newRow(\"storico\", {\n        unixMs: msg.payload.unixMs,\n        col1: msg.payload.pAttTot_inv ?? context.get(\"pAttTot_inv\"),\n        col2: msg.payload.pAttTot_pm3250 ?? context.get(\"pAttTot_pm3250\"),\n        col3: msg.payload.pAttTot_pm500 ?? context.get(\"pAttTot_pm500\"),\n    }),\n    payload: \"\"\n}\n\n\n\n//node.send query as soon as db is connected and ready\n//mysql.asyncSend(node,query,5000,100*30*1000);\nnode.send(query)\n\n\n\n\n\n\n//query Potenza Attiva di inverter, analizz.rete pm3250 (p1), analizz.rete pm500(pterra)\n    //for (let addr of [4454, 2532, 2322])",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 405,
        "wires": [
            [
                "ce9547c90f0ade2e",
                "ea4a988a0afb4c37"
            ]
        ]
    },
    {
        "id": "ce9547c90f0ade2e",
        "type": "debug",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "dbQuery",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 945,
        "y": 450,
        "wires": []
    },
    {
        "id": "ea4a988a0afb4c37",
        "type": "link call",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "queryDb",
        "links": [
            "b094920fec65f78d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 960,
        "y": 405,
        "wires": [
            [
                "87b58b85df970e28"
            ]
        ]
    },
    {
        "id": "9f21b28345764dd0",
        "type": "function",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "retry 4s max 1k msg ~250s",
        "func": "var delay=4000;\nlet maxQueueSize = 1000;\n//let maxQueueTime = maxQueueSize / delay s\nsetTimeout(()=>{\n    delete msg.error;\n    msg.attempts = (msg.attempts ? msg.attempts++ : 0);\n    if(msg.attempts < maxQueueSize/delay)\n        node.send(msg,false);\n},delay)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "ea4a988a0afb4c37"
            ]
        ]
    },
    {
        "id": "87b58b85df970e28",
        "type": "switch",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "5c240797a607a72e",
        "name": "error",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 405,
        "wires": [
            [
                "9f21b28345764dd0"
            ],
            []
        ]
    },
    {
        "id": "40d2a39b57f59f1d",
        "type": "inject",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "ba95acef3cf1d482",
        "name": "toggle",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "toggle",
        "payloadType": "str",
        "x": 430,
        "y": 255,
        "wires": [
            [
                "8615db9870d9365b"
            ]
        ]
    },
    {
        "id": "8615db9870d9365b",
        "type": "gate",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "ba95acef3cf1d482",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 545,
        "y": 255,
        "wires": [
            [
                "899cc7f63c34db85"
            ]
        ],
        "l": false
    },
    {
        "id": "812eb6cf9a5a2c7a",
        "type": "comment",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "ba95acef3cf1d482",
        "name": "#dbg toggle",
        "info": "",
        "x": 405,
        "y": 225,
        "wires": []
    },
    {
        "id": "899cc7f63c34db85",
        "type": "function",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "liveGaugesUpdate",
        "func": "\n\n//if undefined -> use last good one\nif (msg.payload.pAttTot_inv !== null && msg.payload.pAttTot_inv !== undefined)\n    context.set(\"pAttTot_inv\", msg.payload.pAttTot_inv);\nif (msg.payload.pAttTot_pm3250 !== null && msg.payload.pAttTot_pm3250 !== undefined)\n    context.set(\"pAttTot_pm3250\", msg.payload.pAttTot_pm3250);\nif (msg.payload.pAttTot_pm500 !== null && msg.payload.pAttTot_pm500 !== undefined)\n    context.set(\"pAttTot_pm500\", msg.payload.pAttTot_pm500);\n\n\n\nmsg.topic = \"liveGaugesUpdate\";\nmsg.payload.pAttTot_inv = msg.payload.pAttTot_inv ?? context.get(\"pAttTot_inv\");\nmsg.payload.pAttTot_pm3250 = msg.payload.pAttTot_pm3250 ?? context.get(\"pAttTot_pm3250\");\nmsg.payload.pAttTot_pm500 = msg.payload.pAttTot_pm500 ?? context.get(\"pAttTot_pm500\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 270,
        "wires": [
            [
                "a8c52cb41a3ce465"
            ]
        ]
    },
    {
        "id": "5f11b4017ea0a53a",
        "type": "comment",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "it also updates liveLine chart",
        "info": "",
        "x": 905,
        "y": 240,
        "wires": []
    },
    {
        "id": "a8c52cb41a3ce465",
        "type": "uib-sender",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "url": "webapp",
        "name": "webapp_liveGaugesUpdate",
        "topic": "liveGaugesUpdate",
        "passthrough": false,
        "return": false,
        "outputs": 0,
        "x": 1115,
        "y": 270,
        "wires": []
    },
    {
        "id": "ee7ff068761aee92",
        "type": "change",
        "z": "bdc10eb0bfc2c224",
        "d": true,
        "g": "04b1005a90c8a3c5",
        "name": "topic:liveGaugesUpdate",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "liveGaugesUpdate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 895,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "168519c137046930",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 2085,
        "wires": [
            [
                "f1103d4e21a73fdc"
            ]
        ]
    },
    {
        "id": "f1103d4e21a73fdc",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "send query",
        "func": "\n//# functionOutputs must be = or > than returned array length\n\nvar msgStack=new Array();\n\n\n\n//for(let i=0;i<7;i++){\n    node.send(flow.queryRegistry(\"0x802\", \"0x803\"));\n    //node.send(flow.queryRegistry(4400, 4401));\n//}\n\n\n//return {\"payload\":msgStack}; //se usi nodo split\n//node.send(flow.queryRegistry(\"0x0001\", \"0x0009\"));\n\n\n//for(let i=0; i<msgStack.length;i++)\n//    node.send(msgStack[i]);\n\n/*\nreturn msgStack.map( (query,index) => { return {\n    \"payload\":query,\n    \"queryIndex\":index,\n    \"topic\": ((query.topic===undefined) ? null : query.topic)\n}});//[{ 'a': 1 }, { 'a': 2 }, { 'a': 3 }];\n\n/**/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (global.inverterUnitId===undefined)\n    global.inverterUnitId=10;\n\nflow.getDefaultQuery = function (address = 0, quantity = 2) {\n    return {\n        'payload':{\n            'value': null,\n            'fc': 3, //mode: Holding Register\n            //'unitid': global.inverterUnitId //overrides default\n            'address': address,\n            'quantity': quantity\n        }\n    };\n}\n\n//from,to   string|int  hex string like \"ox802\" or int like 2050\nflow.queryRegistry= function (from, to,sequenceName=\"\") {\n    if (typeof (from) == \"string\")\n        from = parseInt(from);\n    if (typeof (to) == \"string\")\n        to = parseInt(to);\n    let ret = flow.getDefaultQuery(from, to - from + 1);\n    ret.name=sequenceName;\n    return ret;\n}",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2085,
        "wires": [
            [
                "99f290d09a2d605c"
            ]
        ]
    },
    {
        "id": "5857ac58e83b5a22",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "resetQueue",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 1945,
        "wires": [
            [
                "d20bfd7ca3a2b214"
            ]
        ]
    },
    {
        "id": "99f290d09a2d605c",
        "type": "q-gate",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "queue-gate",
        "controlTopic": "queueControl",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 640,
        "y": 2045,
        "wires": [
            [
                "05155140ca77bf61"
            ]
        ]
    },
    {
        "id": "3da7bb8fa229a82f",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "queue control",
        "func": "\n  //when channel status changes\nif(msg.status!==undefined){\n    if(flow.get(\"modbusIsReady\")){\n      setTimeout(()=>{\n        node.send(context.command(\"flush\"));\n        node.send(context.command(\"open\"));\n      },1000); //delay messages to avoid an immediate new crash \n      return;\n    }\n    else{\n      return context.command(\"queue\")\n    }\n}\n\n\n\n/* info:\n\nMessages with the topic Control Topic are control messages,\n which change or display the state of the gate\n  or manage the queue. \nControl messages setting the state are \n**open, close, toggle, queue, and default.\nThose managing the queue are\n**trigger, flush, peek, drop, and reset.\nThe status command refreshes the node status.\nA control message payload may be a string, number, or boolean.\nThe effects of these commands and the status object displayed\n by the node are described on https://github.com/drmibell/node-red-contrib-queue-gate\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.command= function (command){\n    return { 'topic': \"queueControl\", 'payload':command};\n}",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2005,
        "wires": [
            [
                "99f290d09a2d605c"
            ]
        ]
    },
    {
        "id": "11103fa07a72872e",
        "type": "status",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "scope": [
            "05155140ca77bf61"
        ],
        "x": 210,
        "y": 1965,
        "wires": [
            [
                "1b762b6676faa61a",
                "3da7bb8fa229a82f"
            ]
        ]
    },
    {
        "id": "905242d162db1caf",
        "type": "catch",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "scope": [
            "05155140ca77bf61"
        ],
        "uncaught": false,
        "x": 160,
        "y": 2045,
        "wires": [
            [
                "a6557d27a4ccccf0",
                "b9f8339f0bddcb39"
            ]
        ]
    },
    {
        "id": "3e316755168c06f6",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "unset error",
        "func": "delete msg.error;\nmsg.unitId=10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2045,
        "wires": [
            []
        ]
    },
    {
        "id": "cfefef80e9b194d1",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "send msg on high and highhigh, throws warning and error too",
        "info": "",
        "x": 855,
        "y": 1925,
        "wires": [],
        "l": false
    },
    {
        "id": "fcf4dd1dc8f9d063",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "when sending fails it flushes the queue appending the error to each processed msg as msg.error",
        "info": "when sending fails it flushes the queue\nappending the error to each processed msg\nas msg.error",
        "x": 875,
        "y": 2025,
        "wires": [],
        "l": false
    },
    {
        "id": "e94bbfdfafbd2c8d",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "queueControl",
        "payload": "reset",
        "payloadType": "str",
        "x": 400,
        "y": 2145,
        "wires": [
            [
                "99f290d09a2d605c"
            ]
        ]
    },
    {
        "id": "e93ee763df9c6153",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "holds errors and sends them again once modbus is ready. The actual queue is handled by the modbus config node.",
        "info": "holds errors and sends them again once modbus is ready.\nThe actual queue is handled by the modbus config node.",
        "x": 655,
        "y": 2005,
        "wires": [],
        "l": false
    },
    {
        "id": "05155140ca77bf61",
        "type": "modbus-flex-getter",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "query inverter",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "server": "215f97f57dbdc3e9",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 830,
        "y": 2045,
        "wires": [
            [
                "9bc9b1bd765143ca"
            ],
            [
                "372526d485ca01db"
            ]
        ]
    },
    {
        "id": "d20bfd7ca3a2b214",
        "type": "modbus-queue-info",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "topic": "",
        "unitid": "0",
        "queueReadIntervalTime": "100",
        "lowLowLevel": "5",
        "lowLevel": "5",
        "highLevel": "10",
        "highHighLevel": "15",
        "server": "37fae351f7b9f19a",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": false,
        "updateOnAllUnitQueues": true,
        "x": 820,
        "y": 1945,
        "wires": [
            []
        ]
    },
    {
        "id": "a6557d27a4ccccf0",
        "type": "switch",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 280,
        "y": 2045,
        "wires": [
            [],
            [],
            [
                "3e316755168c06f6"
            ]
        ]
    },
    {
        "id": "9bc9b1bd765143ca",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "log errors",
        "func": "node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\n\nif(msg.error!=undefined){\n    node.error(msg.error);\n    context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.log(msg.payload)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2005,
        "wires": [
            []
        ]
    },
    {
        "id": "1b762b6676faa61a",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "shareConnectionStatus",
        "func": "flow.set(\"modbusStatusString\", (msg.status.text ? msg.status.text : \"none\"));\nif(msg.status.fill==\"green\"){\n    flow.set(\"modbusIsReady\", true);\n}\nelse{\n    flow.set(\"modbusIsReady\", false);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"modbusStatusString\", \"none\");\nflow.set(\"modbusIsReady\", false);",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1965,
        "wires": [
            []
        ]
    },
    {
        "id": "f4917f08c9c0b1a1",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "BKP query inverter",
        "info": "",
        "x": 300,
        "y": 1885,
        "wires": []
    },
    {
        "id": "372526d485ca01db",
        "type": "debug",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2065,
        "wires": []
    },
    {
        "id": "b9f8339f0bddcb39",
        "type": "debug",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "da77e7609f045ab9",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 2005,
        "wires": []
    },
    {
        "id": "1139a9eb6fcaa7a1",
        "type": "link in",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "link in",
        "links": [],
        "x": 100,
        "y": 1515,
        "wires": [
            [
                "77c107f0b5ae5214"
            ]
        ]
    },
    {
        "id": "77c107f0b5ae5214",
        "type": "switch",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "allWeekEnergy",
                "vt": "str"
            },
            {
                "t": "else"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 205,
        "y": 1515,
        "wires": [
            [
                "28569d65c3243a38"
            ],
            [
                "8e489dedabd31f4f"
            ],
            [
                "0b9842e3937bb61a"
            ]
        ]
    },
    {
        "id": "6b21ca10d112452a",
        "type": "file",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "storeDati",
        "filename": "${path_fotovoltaico_dati}\\allWeekEnergy.dat",
        "filenameType": "env",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 745,
        "y": 1455,
        "wires": [
            [
                "3797e914cd36dd8a"
            ]
        ]
    },
    {
        "id": "8e489dedabd31f4f",
        "type": "debug",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 376.9999656677246,
        "y": 1544.9999828338623,
        "wires": []
    },
    {
        "id": "0b9842e3937bb61a",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "log errors #2",
        "func": "/*\nif(context.isDisplaying)\n    context.addErr(\"msgNonSmistato\");\nelse\n    context.displayError()\nnode.warn(\"msgNonSmistato\");\n\n*/\nnode.warn([\"missingTopicException\",msg]);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\n//context.errors={}; //key:value pairs\ncontext.errStack=[];\ncontext.errHead=0;\n//context.maxErrCount=0;\ncontext.timeout=1600;\n//context.maxTimeout=0;\ncontext.isDisplaying=false;\n\n\n\ncontext.displayError = function (errName, duration /*, startTime=0*/) {\n    context.isDisplaying=true;\n    let startTime=0;\n    node.warn(errName); //per qualche motivo tutti i parametri della funzione restano undefined\n\n    node.status({ fill: \"red\", shape: \"dot\", text: errName });\n    setTimeout(() => {\n        node.status({ fill: \"red\", shape: \"ring\", text: errName });\n    }, duration/4 + startTime);\n    setTimeout(() => {\n        node.status({ fill: \"red\", shape: \"dot\", text: errName });\n    }, duration*3/4 + startTime);\n    setTimeout(() => {\n        node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });       \n        context.nextError();\n    }, duration + startTime);\n}\n\ncontext.addErr = function (errName) {\n    if (context.isDisplaying){\n        context.errStack.push(errName);\n        node.log(context.errStack);\n    }\n    else\n        context.displayError(\"someText\", context.timeout);\n}\ncontext.nextError = function () {\n    if (context.errHead == context.errStack.length) {\n        context.isDisplaying=false;\n        node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\n        context.errStack = new Array()\n        context.errHead = 0;\n        return\n    }\n    else {\n        context.displayError(context.errStack[context.errHead],context.timeout);\n        context.errHead++;\n    }\n}\n\n",
        "finalize": "",
        "libs": [],
        "x": 235,
        "y": 1575,
        "wires": [
            []
        ]
    },
    {
        "id": "ba73114a49b89f60",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "allWeekEnergy",
        "info": "",
        "x": 260,
        "y": 1455,
        "wires": [],
        "l": false
    },
    {
        "id": "3797e914cd36dd8a",
        "type": "debug",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 885,
        "y": 1455,
        "wires": []
    },
    {
        "id": "316bce5bb99571f1",
        "type": "json",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 640,
        "y": 1455,
        "wires": [
            [
                "6b21ca10d112452a"
            ]
        ],
        "l": false
    },
    {
        "id": "7a0bd75fedb9f8d1",
        "type": "join",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "e4b56d5c220355cd",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 580,
        "y": 1455,
        "wires": [
            [
                "316bce5bb99571f1"
            ]
        ],
        "l": false
    },
    {
        "id": "cae2260813cda61f",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "e4b56d5c220355cd",
        "name": "composeBigEndian",
        "func": "msg.payload = msg.payload[0] | (msg.payload[1] << 16);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465,
        "y": 1455,
        "wires": [
            [
                "7a0bd75fedb9f8d1"
            ]
        ]
    },
    {
        "id": "28569d65c3243a38",
        "type": "split",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "e4b56d5c220355cd",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "2",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 350,
        "y": 1455,
        "wires": [
            [
                "cae2260813cda61f"
            ]
        ],
        "l": false
    },
    {
        "id": "a4d6f2321520f0f5",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "2cf1ebc3c7549361",
        "name": "RISPOSTE INTERROGAZIONI",
        "info": "",
        "x": 235,
        "y": 1375,
        "wires": []
    },
    {
        "id": "d66367b49a88fb46",
        "type": "catch",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "catchAll",
        "scope": null,
        "uncaught": true,
        "x": 355,
        "y": 90,
        "wires": [
            [
                "a6da843d5aa39ebd"
            ]
        ]
    },
    {
        "id": "25449877336f3f5c",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "onStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "5da6337e54d3d370"
            ]
        ]
    },
    {
        "id": "6b7b42e7a9a2ca07",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "define query functions",
        "func": "//look into start tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (global.get(\"inverterUnitId\") === undefined)\n    global.set(\"inverterUnitId\",10);\n\nlet obj = {\n    \"getDefault\": this.from,\n    \"from\": function (address = 0, quantity = 2) {\n        return {\n            'payload': {\n                'value': null,\n                'fc': 3, //mode: Holding Register\n                //'unitid': global.get(\"inverterUnitId\") //overrides default\n                'address': address,\n                'quantity': quantity\n            }\n        };\n    },\n    \"between\": function (from, to, sequenceName = \"\") {\n        if (typeof (from) == \"string\")\n            from = parseInt(from);\n        if (typeof (to) == \"string\")\n            to = parseInt(to);\n        let ret = this.from(from, to - from + 1);\n        ret.name = sequenceName;\n        return ret;\n    },\n    \n    /**\n     * @description //byte order: da 2301 a 3210 //il plc salva le singole coppie di byte in LittleEndian, mentre la coppia di coppie come BigEndian. (originale: 0123 -> 01,23 -> 23,01 :inMemoria)\n     * @param msgPayloadBuffer:Array con lunghezza pari (altrimenti l'ultimo el viene ignorato)\n     * @return Void //swap in-place\n     */\n    \"plcMem2LitEnd\": function (msgPayloadBuffer) {\n        for (let i = 0, tmp, buf = msgPayloadBuffer; i < buf.length - 1; i += 2) {\n            tmp = buf[i];\n            buf[i] = buf[i + 1];\n            buf[i + 1] = tmp;\n        }\n    }\n    \n}\nglobal.set(\"query\", obj);\nnode.status({ fill: \"green\", text: \"defined\" });\n\n/*\nflow.set(\"getDefaultQuery\", function (address = 0, quantity = 2) {\n    return {\n        'payload':{\n            'value': null,\n            'fc': 3, //mode: Holding Register\n            'unitid': 10, //overrides default\n            'address': address,\n            'quantity': quantity\n        }\n    };\n})\n\n//from,to   string|int  hex string like \"ox802\" or int like 2050\nflow.set(\"queryRegistry\", function (from, to,sequenceName=\"\") {\n    if (typeof (from) == \"string\")\n        from = parseInt(from);\n    if (typeof (to) == \"string\")\n        to = parseInt(to);\n    let ret = flow.get(\"getDefaultQuery\")(from, to - from + 1);\n    ret.name=sequenceName;\n    return ret;\n})*/\n",
        "finalize": "",
        "libs": [],
        "x": 445,
        "y": 135,
        "wires": [
            []
        ]
    },
    {
        "id": "592ab95d2bbeaf0b",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "set global utils",
        "func": "//look into start tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nglobal.set(\"utils\", {\n    \"errorBlink\":function(node,last=1500){\n        node.status({ fill: \"red\", text: \"\" });\n        setTimeout(() => {\n            node.status({ fill: \"\", text: \"\" });\n        }, 250);\n        setTimeout(() => {\n            node.status({ fill: \"yellow\", text: \"\" });\n        }, 350);\n        setTimeout(() => {\n            node.status({ fill: \"\", text: \"\" });\n        }, last)\n    },\n    \"##litEndian2int\": function (a, b){\n        return a<<16 | b;\n    }, //msg.payload[0] << 16) | msg.payload[1]\n});\n\nnode.status({ fill: \"green\", text: \"defined\" });\n",
        "finalize": "",
        "libs": [],
        "x": 425,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5da6337e54d3d370",
        "type": "change",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queryInverterJson",
                "pt": "flow",
                "to": "{\"value\":0,\"fc\":3,\"address\":0,\"quantity\":0}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 455,
        "y": 225,
        "wires": [
            []
        ]
    },
    {
        "id": "a6da843d5aa39ebd",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "catchAll",
        "func": "\n\nif (msg.error) {\n    node.error({ \"err\": msg.error.message, \"full\": msg });\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse {\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 505,
        "y": 90,
        "wires": [
            []
        ]
    },
    {
        "id": "2f740e6f90340d55",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "g": "0fd51b35b0ef24fa",
        "name": "most stuff is declared inside the START tab in function nodes",
        "info": "most stuff is declared inside the START tab in function nodes",
        "x": 555,
        "y": 135,
        "wires": [],
        "l": false
    },
    {
        "id": "e788bf33f7250b4e",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.5",
        "topic": "query",
        "payload": "",
        "payloadType": "date",
        "x": 155,
        "y": 645,
        "wires": [
            [
                "734a6280c896ee84"
            ]
        ]
    },
    {
        "id": "734a6280c896ee84",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "send query",
        "func": "/*  flow.query:\n    \"from\": function (address = 0, quantity = 2)\n    \"between\": function (from, to, sequenceName = \"\")\n*/\n\nlet query=global.get(\"query\");\n\nfor(let i=0;i<0;i++){\n    node.send(query.from(4400,2));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 645,
        "wires": [
            [
                "042d220310f4d201"
            ]
        ]
    },
    {
        "id": "042d220310f4d201",
        "type": "q-gate",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "queue-gate",
        "controlTopic": "queueControl",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 575,
        "y": 585,
        "wires": [
            [
                "829cb3bdb9fa3035"
            ]
        ]
    },
    {
        "id": "a4ea3b73128da3ca",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "queue control",
        "func": "var command = context.get(\"command\");\n  //when channel status changes\nif(flow.get(\"modbusIsReady\")){\n  setTimeout(()=>{\n    node.send(command(\"flush\"));\n    node.send(command(\"open\"));\n  },1000); //delay messages to avoid an immediate new crash \n  return;\n}\nelse{\n  return command(\"queue\")\n}\n\n\n\n\n/* queue gate usage info clip:\n\nMessages with the topic Control Topic are control messages,\n which change or display the state of the gate\n  or manage the queue. \nControl messages setting the state are \n**open, close, toggle, queue, and default.\nThose managing the queue are\n**trigger, flush, peek, drop, and reset.\nThe status command refreshes the node status.\nA control message payload may be a string, number, or boolean.\n the payload is converted to a string and then tested against the command definitions.\n If a control message is received but not recognized, there is no output or change of state, and the node issues a warning.\nThe effects of these commands and the status object displayed\n by the node are described on https://github.com/drmibell/node-red-contrib-queue-gate\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"command\", function (command){\n    return { 'topic': \"queueControl\", 'payload':command};\n});",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 540,
        "wires": [
            [
                "042d220310f4d201"
            ]
        ]
    },
    {
        "id": "f31346e5c189cc0d",
        "type": "status",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "scope": [
            "829cb3bdb9fa3035"
        ],
        "x": 145,
        "y": 495,
        "wires": [
            [
                "e548c0432c3393fb",
                "70f0e9dd596f13dd",
                "a4ea3b73128da3ca",
                "94ccb2ba33d6be90"
            ]
        ]
    },
    {
        "id": "f8f56d1dd1270dfc",
        "type": "catch",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "scope": [
            "829cb3bdb9fa3035"
        ],
        "uncaught": false,
        "x": 155,
        "y": 585,
        "wires": [
            [
                "b375a71d547e53ec"
            ]
        ]
    },
    {
        "id": "e3c72d4f0636519a",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "unset error",
        "func": "delete msg.error;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 585,
        "wires": [
            [
                "042d220310f4d201"
            ]
        ]
    },
    {
        "id": "db5d63224303cb8e",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "send msg on high and highhigh, throws warning and error too",
        "info": "",
        "x": 805,
        "y": 465,
        "wires": [],
        "l": false
    },
    {
        "id": "cba181767f3c556b",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "when sending fails it flushes the queue appending the error to each processed msg as msg.error",
        "info": "when sending fails it flushes the queue\nappending the error to each processed msg\nas msg.error",
        "x": 765,
        "y": 555,
        "wires": [],
        "l": false
    },
    {
        "id": "d8e171d74cfb3f15",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "queueControl",
        "payload": "queue",
        "payloadType": "str",
        "x": 255,
        "y": 690,
        "wires": [
            [
                "042d220310f4d201"
            ]
        ]
    },
    {
        "id": "fae481120ae1669e",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "holds errors and sends them again once modbus is ready. The actual queue is handled by the modbus config node.",
        "info": "holds errors and sends them again once modbus is ready.\nThe actual queue is handled by the modbus config node.",
        "x": 565,
        "y": 555,
        "wires": [],
        "l": false
    },
    {
        "id": "829cb3bdb9fa3035",
        "type": "modbus-flex-getter",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "query PLC",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "37fae351f7b9f19a",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "keepMsgProperties": true,
        "x": 800,
        "y": 585,
        "wires": [
            [],
            [
                "8738217e5c0cf07c"
            ]
        ]
    },
    {
        "id": "586a6d5aedbb7697",
        "type": "modbus-queue-info",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "topic": "",
        "unitid": "0",
        "queueReadIntervalTime": "100",
        "lowLowLevel": "5",
        "lowLevel": "5",
        "highLevel": "110",
        "highHighLevel": "115",
        "server": "37fae351f7b9f19a",
        "errorOnHighLevel": false,
        "showStatusActivities": true,
        "updateOnAllQueueChanges": true,
        "updateOnAllUnitQueues": true,
        "x": 775,
        "y": 495,
        "wires": [
            []
        ]
    },
    {
        "id": "8d2faa48c7f2974b",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "log errors #1",
        "func": "node.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\n\nif(msg.error!=undefined){\n    node.error([\"queryFailed\",msg.error]);\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.warn(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 1085,
        "y": 555,
        "wires": [
            []
        ]
    },
    {
        "id": "70f0e9dd596f13dd",
        "type": "function",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "shareConnectionStatus",
        "func": "flow.set(\"modbusStatusString\", (msg.status.text ? msg.status.text : \"none\"));\n//if (msg.status.fill == \"green\" || msg.status.text == \"activated\" || msg.status.text == \"reading done\" || msg.status.text == \"queueing\"){\nif(msg.status.fill != \"red\"){\n    flow.set(\"modbusIsReady\", true);\n    node.status({ fill: \"green\", text: \"modbusIsReady\" });\n}\nelse{\n    flow.set(\"modbusIsReady\", false);\n    node.status({ fill: \"red\", text: (msg.status.text ? msg.status.text : \"none\") });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"modbusStatusString\", \"none\");\nflow.set(\"modbusIsReady\", false);",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 510,
        "wires": [
            []
        ]
    },
    {
        "id": "e448cf338d7ce60a",
        "type": "link out",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "PLC Query OUT",
        "mode": "return",
        "links": [],
        "x": 1020,
        "y": 615,
        "wires": []
    },
    {
        "id": "3d7f018e03cb4a74",
        "type": "link in",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "PLC Query IN",
        "links": [
            "5a8c86f6c56c9b31"
        ],
        "x": 410,
        "y": 725,
        "wires": [
            [
                "042d220310f4d201"
            ]
        ]
    },
    {
        "id": "8738217e5c0cf07c",
        "type": "switch",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": true,
        "outputs": 2,
        "x": 900,
        "y": 585,
        "wires": [
            [
                "8d2faa48c7f2974b"
            ],
            [
                "e448cf338d7ce60a",
                "bacfab2b6aa8f62e"
            ]
        ],
        "l": false
    },
    {
        "id": "ceacba052417233a",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "INTERROGAZIONE PLC",
        "info": "",
        "x": 240,
        "y": 405,
        "wires": []
    },
    {
        "id": "b375a71d547e53ec",
        "type": "delay",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 585,
        "wires": [
            [
                "e3c72d4f0636519a"
            ]
        ],
        "l": false
    },
    {
        "id": "761d54a566d15f19",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 540,
        "wires": [
            [
                "a4ea3b73128da3ca"
            ]
        ],
        "l": false
    },
    {
        "id": "b7e4f98ef65e21b7",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "queueControl:trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "queueControl",
        "payload": "trigger",
        "payloadType": "str",
        "x": 255,
        "y": 720,
        "wires": [
            [
                "042d220310f4d201"
            ]
        ]
    },
    {
        "id": "e548c0432c3393fb",
        "type": "debug",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 325,
        "y": 450,
        "wires": []
    },
    {
        "id": "d0d9b9c907a6dfeb",
        "type": "inject",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "onStartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 595,
        "y": 495,
        "wires": [
            [
                "586a6d5aedbb7697"
            ]
        ]
    },
    {
        "id": "bacfab2b6aa8f62e",
        "type": "debug",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "plc output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1035,
        "y": 660,
        "wires": []
    },
    {
        "id": "94ccb2ba33d6be90",
        "type": "link out",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "c7efc430b35e5347"
        ],
        "x": 280,
        "y": 480,
        "wires": []
    },
    {
        "id": "3ca71da5dcaca581",
        "type": "comment",
        "z": "c1d4418a6f1f1693",
        "d": true,
        "g": "5f741e9d0e05f1e2",
        "name": "freq. aggiornamento",
        "info": "precisione +/- 3s\nvalori relativi alla corrente: ~30s (potenza,tensione..)\ntemperatura: ~30s, sfasata di ~15s\n\ndistanza fra cambiamenti di qualsiasi genere segue pattern irregolare\n9-9-9-15-9-9-18-9-9-9-..\n\n\n-- pm500 --\nsembra lo stesso.\n",
        "x": 765,
        "y": 630,
        "wires": []
    },
    {
        "id": "97b7f69755192a45",
        "type": "function",
        "z": "687893cfe8ebd28b",
        "name": "set global.mysql",
        "func": "//look into onStart tab",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/* javascript class cheatsheet\n//everything is public.\n    #varname == private\n    *method() == private\n    get varname()/get varname:f() = getter for varname\n//; at each line's end\n*/\nclass mysql {\n    #tableDict;\n    /** @param dbgMode:Bool flag to enable typo checking and such */\n    dbgMode; //unused\n    get tableDict() {\n        return this.#tableDict;\n    }\n\n    constructor() {\n        this.#tableDict = {\n            storico: [\"unixMs\", \"col1\", \"col2\", \"col3\", \"col4\"]\n        };\n        this.dbgMode = false;\n    };\n\n    /**\n     * wait for db to be ready for queries, then send it.<br>\n     * - it's recomended to copy-paste this in the node instead of calling it, as to have error's origin set to the caller\n     * @param {typeof Object.prototype} query - query to send\n     * @param {number} retryDelay - time in ms to pass to setInterval()\n     * @param {number} timeout - time in ms after which stop trying and outputting an error.\n     * @returns {void}\n    */\n    asyncSend(callerNode, query, retryDelay=5000,timeout=120*1000){\n        node.warn({ err: \"STILL USING ASYNC SEND\", source: callerNode.id})\n        if(global.get(\"dbIsOk\")) {\n            callerNode.send(query);\n        }\n        else {\n            let tout;\n            const intv = setInterval(() => {\n                if (global.get(\"dbIsOk\")) {\n                    clearInterval(intv);\n                    tout && clearTimeout(tout);\n                    callerNode.send(query, false)\n                }\n            }, retryDelay)\n            \n            tout = setTimeout(() => {\n                clearInterval(intv);\n                callerNode.error({ err: \"mysql:query timedout\", q: query });\n            }, timeout);\n        }\n    }\n\n    newRow(table, pairsObj, extraSql = \"\") {\n        return `INSERT INTO ${table} SET ${(this.toList(pairsObj))} ${extraSql}`;\n    };\n\n    toList(pairs) {\n        let assignList = \"\";\n        for(const key in pairs) {\n            assignList += `${key}=${pairs[key]}, `;\n        }\n        if(assignList)\n            assignList = assignList.slice(0, -2);\n        return assignList;\n    }\n\n//\n\n    insert(template, pairs) { }\n\n    static insertStorico(vals) {\n        var { POTENZA_ATTIVA, POTENZA_PV1, POTENZA_PV2 } = vals\n    }\n    static query(template, valObj) {\n\n    }\n}\nglobal.set(\"mysql\", new mysql());\n\nnode.status({fill:\"green\",text:\"defined\"});",
        "finalize": "",
        "libs": [],
        "x": 185,
        "y": 165,
        "wires": [
            [
                "67ac1c5ae26cb476",
                "3487c38e1b14b47e"
            ]
        ]
    },
    {
        "id": "67ac1c5ae26cb476",
        "type": "change",
        "z": "687893cfe8ebd28b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mysql",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 165,
        "wires": [
            []
        ]
    },
    {
        "id": "3487c38e1b14b47e",
        "type": "debug",
        "z": "687893cfe8ebd28b",
        "name": "mysql",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 210,
        "wires": []
    },
    {
        "id": "543afb9b5bf5e998",
        "type": "function",
        "z": "687893cfe8ebd28b",
        "d": true,
        "name": "set global.functions",
        "func": "\nnode.global.set(\"utils\",{\n    errorMsg:function (){\n\n    }\n\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n/* javascript class cheatsheet\n//everything is public.\n    #varname == private\n    *method() == private\n    get varname()/get varname:f() = getter for varname\n//; at each line's end\n*/\nclass mysql {\n    #tableDict;\n    /** @param dbgMode:Bool flag to enable typo checking and such */\n    dbgMode; //unused\n    get tableDict() {\n        return this.#tableDict;\n    }\n\n    constructor() {\n        this.#tableDict = {\n            storico: [\"unixMs\", \"col1\", \"col2\", \"col3\", \"col4\"]\n        };\n        this.dbgMode = false;\n    };\n\n    /**\n     * wait for db to be ready for queries, then send it.<br>\n     * - it's recomended to copy-paste this in the node instead of calling it, as to have error's origin set to the caller\n     * @param {typeof Object.prototype} query - query to send\n     * @param {number} retryDelay - time in ms to pass to setInterval()\n     * @param {number} timeout - time in ms after which stop trying and outputting an error.\n     * @returns {void}\n    */\n    asyncSend(callerNode, query, retryDelay=5000,timeout=120*1000){\n        if(global.get(\"dbIsOk\")) {\n            callerNode.send(query);\n        }\n        else {\n            let tout;\n            const intv = setInterval(() => {\n                if (global.get(\"dbIsOk\")) {\n                    clearInterval(intv);\n                    tout && clearTimeout(tout);\n                    callerNode.send(query, false)\n                }\n            }, retryDelay)\n            \n            tout = setTimeout(() => {\n                clearInterval(intv);\n                callerNode.error({ err: \"mysql:query timedout\", q: query });\n            }, timeout);\n        }\n    }\n\n    newRow(table, pairsObj, extraSql = \"\") {\n        return `INSERT INTO ${table} SET ${(this.toList(pairsObj))} ${extraSql}`;\n    };\n\n    toList(pairs) {\n        let assignList = \"\";\n        for(const key in pairs) {\n            assignList += `${key}=${pairs[key]}, `;\n        }\n        if(assignList)\n            assignList = assignList.slice(0, -2);\n        return assignList;\n    }\n\n//\n\n    insert(template, pairs) { }\n\n    static insertStorico(vals) {\n        var { POTENZA_ATTIVA, POTENZA_PV1, POTENZA_PV2 } = vals\n    }\n    static query(template, valObj) {\n\n    }\n}\nglobal.set(\"mysql\", new mysql());\n\nnode.status({fill:\"green\",text:\"defined\"});",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "d270c3de05a36e77",
        "type": "mysql",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "mydb": "9a040495b3c81283",
        "name": "noderedDb",
        "x": 780,
        "y": 225,
        "wires": [
            [
                "c1c4729ef16ce22a",
                "50b758f18740c23d"
            ]
        ]
    },
    {
        "id": "5228452a6339fa55",
        "type": "link in",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "queryDb in",
        "links": [],
        "x": 610,
        "y": 225,
        "wires": [
            [
                "d270c3de05a36e77"
            ]
        ],
        "l": true
    },
    {
        "id": "c1c4729ef16ce22a",
        "type": "link out",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "queryDb out",
        "mode": "return",
        "links": [],
        "x": 970,
        "y": 225,
        "wires": []
    },
    {
        "id": "cd41c852c2e5f702",
        "type": "catch",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "",
        "scope": [
            "d270c3de05a36e77"
        ],
        "uncaught": false,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "c1c4729ef16ce22a",
                "3180fd0a99128c28",
                "50b758f18740c23d"
            ]
        ]
    },
    {
        "id": "1a8c704b1226b50f",
        "type": "file",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "",
        "filename": "dbErrors.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e6adaf06802e51f3",
        "type": "comment",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "query database",
        "info": "-always returns something\n-log errors to file\n",
        "x": 630,
        "y": 135,
        "wires": []
    },
    {
        "id": "3180fd0a99128c28",
        "type": "function",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "prepare log",
        "func": "function safeStringify(obj) {\n    var cache = [];\n    var cacheKeys = [];\n    return JSON.stringify(obj, (key, value) => {\n        if (typeof value === 'object' && value !== null) {\n            //Duplicate reference found -> discard key / store\n            const idx = cache.indexOf(value)\n            //if duplicate found\n            //return twin's key instead\n            if (idx != -1) //-1 means not present\n                return \"dupOf_\" + (cacheKeys[idx].toString() ?? \"root\");\n            //else store it\n            else {\n                cache.push(value);\n                cacheKeys.push(key);\n            }\n        }\n        return value;\n    });\n}\n\ndelete msg._msgid\ndelete msg._event\n \nnode.error({err:\"some dbError\", fullMsg: msg })\nreturn {\n    payload: { time: new Date().toString(), ms: Date.now(), msg: msg }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 865,
        "y": 180,
        "wires": [
            [
                "1a8c704b1226b50f"
            ]
        ],
        "l": false
    },
    {
        "id": "6317fcd428d05e09",
        "type": "comment",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "general usage info",
        "info": "\n- this node sets its status to the LAST operation's outcome.\n    Meaning it will stay the same unless another query is sent\n-mysql errors are thrown as exceptions\n-connection state is not shared.",
        "x": 830,
        "y": 135,
        "wires": []
    },
    {
        "id": "50b758f18740c23d",
        "type": "debug",
        "z": "687893cfe8ebd28b",
        "d": true,
        "g": "58b6778550aa8a70",
        "name": "dbOutput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1105,
        "y": 225,
        "wires": []
    },
    {
        "id": "d83b9961b3c5fb9e",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "g": "31f4b8716c51f385",
        "name": "uib event out",
        "links": [
            "64690dd246039799"
        ],
        "x": 205,
        "y": 1245,
        "wires": [
            [
                "2c415eda999050f1"
            ]
        ],
        "l": true
    },
    {
        "id": "2c415eda999050f1",
        "type": "switch",
        "z": "76b05f87a5290cf6",
        "g": "31f4b8716c51f385",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "liveDataChartReady",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 335,
        "y": 1245,
        "wires": [
            [
                "63cb5672c06fad4e"
            ],
            [
                "e90fd6ebd8e9a846"
            ]
        ],
        "l": false
    },
    {
        "id": "e90fd6ebd8e9a846",
        "type": "function",
        "z": "76b05f87a5290cf6",
        "g": "31f4b8716c51f385",
        "name": "default: warn",
        "func": "node.warn({txt:\"unhandled uibuilder msg.topic \",event:msg.topic,fullMsg:msg});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1290,
        "wires": [
            []
        ]
    },
    {
        "id": "63cb5672c06fad4e",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "g": "31f4b8716c51f385",
        "name": "uibOn liveDataChartReady",
        "mode": "link",
        "links": [],
        "x": 515,
        "y": 1215,
        "wires": [],
        "l": true
    },
    {
        "id": "a2e783d72e228d3a",
        "type": "comment",
        "z": "76b05f87a5290cf6",
        "g": "31f4b8716c51f385",
        "name": "handle all uib events",
        "info": "",
        "x": 230,
        "y": 1140,
        "wires": []
    },
    {
        "id": "71bdf71b7ab73ed4",
        "type": "uibuilder",
        "z": "76b05f87a5290cf6",
        "g": "6a1c50c04535e13a",
        "name": "webapp",
        "topic": "none",
        "url": "webapp",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "5.1.1",
        "x": 525,
        "y": 165,
        "wires": [
            [
                "0c33f8d537e42c41"
            ],
            []
        ]
    },
    {
        "id": "29da4c340c1c0f16",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "g": "6a1c50c04535e13a",
        "name": "webapp in",
        "links": [
            "c9da44f4b5572f7d",
            "597ce5e277b1e795",
            "3f92af885fe4a9d4"
        ],
        "x": 345,
        "y": 165,
        "wires": [
            [
                "71bdf71b7ab73ed4"
            ]
        ],
        "l": true
    },
    {
        "id": "c9da44f4b5572f7d",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "d": true,
        "g": "6a1c50c04535e13a",
        "name": "webapp out",
        "mode": "link",
        "links": [
            "29da4c340c1c0f16"
        ],
        "x": 355,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "0c33f8d537e42c41",
        "type": "switch",
        "z": "76b05f87a5290cf6",
        "g": "6a1c50c04535e13a",
        "name": "",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "request",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "event",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 675,
        "y": 150,
        "wires": [
            [
                "16c03e6dc270a0a8"
            ],
            [
                "64690dd246039799"
            ],
            [
                "6b19a1a58b2b90d0"
            ]
        ],
        "l": false
    },
    {
        "id": "6b19a1a58b2b90d0",
        "type": "function",
        "z": "76b05f87a5290cf6",
        "g": "6a1c50c04535e13a",
        "name": "default: warn",
        "func": "node.warn({txt:\"unhandled uibuilder msg.type\",topic:msg.type,fullMsg:msg});\n\nglobal.get(\"utils\").errorBlink(node,60000);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 195,
        "wires": [
            []
        ]
    },
    {
        "id": "16c03e6dc270a0a8",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "g": "6a1c50c04535e13a",
        "name": "uib request out",
        "mode": "link",
        "links": [
            "3e1fc30868d42f0c",
            "7103451c8f1ce3d3"
        ],
        "x": 830,
        "y": 105,
        "wires": [],
        "l": true
    },
    {
        "id": "64690dd246039799",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "g": "6a1c50c04535e13a",
        "name": "uib event out",
        "mode": "link",
        "links": [
            "d83b9961b3c5fb9e",
            "d23c81a0325ee4c4"
        ],
        "x": 820,
        "y": 150,
        "wires": [],
        "l": true
    },
    {
        "id": "3e1fc30868d42f0c",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "d": true,
        "g": "6a1c50c04535e13a",
        "name": "uib request out",
        "links": [
            "16c03e6dc270a0a8"
        ],
        "x": 1025,
        "y": 105,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "d23c81a0325ee4c4",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "d": true,
        "g": "6a1c50c04535e13a",
        "name": "uib event out",
        "links": [
            "64690dd246039799"
        ],
        "x": 1015,
        "y": 150,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "42b44a1c5d242838",
        "type": "comment",
        "z": "76b05f87a5290cf6",
        "g": "a9df91edd9e67095",
        "name": "handle all uib requests",
        "info": "",
        "x": 230,
        "y": 315,
        "wires": []
    },
    {
        "id": "f8d4de8ef89ccdb9",
        "type": "function",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "query last 2 hours",
        "func": "const dateFns = global.get(\"dateFns\");\n/**\n * loops value around min and max. (14, 0, 10) -> 4 ,(-2,0,10) -> 8\n * @param {number} val\n * @param {number} min\n * @param {number} max\n */\nfunction wrap(val, min, max) {\n    if (val < min)\n        val = max - (Math.abs(min - val) % Math.abs(max - min));\n    else if (val > max)\n        val = min + (Math.abs(val - max) % Math.abs(max - min));\n    return val;\n}\n\nlet d = new Date();\nlet unixSecs = dateFns.getUnixTime( dateFns.add(new Date(),{hours:-2,minutes:-20}) )\n\nlet query = {\n    topic:`SELECT unixMs, col1, col2, col3 FROM storico WHERE (unixMs > ${unixSecs * 1000})`,\n    payload: null,\n    fromTime: unixSecs * 1000,\n    toTime: Date.now(),\n    _socketId:msg._socketId\n}\n\nreturn query;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 585,
        "y": 765,
        "wires": [
            [
                "463f910d3a8a7f6b",
                "790069aedc4c5ebe"
            ]
        ]
    },
    {
        "id": "463f910d3a8a7f6b",
        "type": "link call",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "queryDb",
        "links": [
            "b094920fec65f78d"
        ],
        "linkType": "static",
        "timeout": "15",
        "x": 765,
        "y": 765,
        "wires": [
            [
                "f024f89d70efae3e",
                "8da1028258065abd"
            ]
        ]
    },
    {
        "id": "f024f89d70efae3e",
        "type": "debug",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "DB OUTPUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 720,
        "wires": []
    },
    {
        "id": "1b78b56bf54d8ceb",
        "type": "inject",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "wrongQuery",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM storico WHERE error",
        "x": 640,
        "y": 720,
        "wires": [
            [
                "463f910d3a8a7f6b"
            ]
        ]
    },
    {
        "id": "8da1028258065abd",
        "type": "function",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "check success & format",
        "func": "\n/*\nmsg.payload.slice()\nmsg.payload = msg.payload.slice(0,80);\nfor(let i=0,arr=msg.payload.slice(170,-1); i<arr.length;i++)\n    msg.payload.push(arr[i]);\n    */\n\n//db error -> ?\nif (msg.error)\n    node.error({ \"err\": msg.error.message, \"src\": msg.error.source.id, \"n\": msg.error.source.name, \"full\": msg });\nelse{   \n    msg.topic = \"initCharts\";\n    msg.dbRows=msg.payload;\n    msg.min = msg.fromTime;\n    msg.max = msg.toTime;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 765,
        "wires": [
            [
                "8a869fbf2653f1a4"
            ]
        ]
    },
    {
        "id": "22b257b1d1caa0d7",
        "type": "inject",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 810,
        "wires": [
            [
                "f8d4de8ef89ccdb9"
            ]
        ],
        "l": false
    },
    {
        "id": "ca2b9f6d1617d974",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "initChart in",
        "links": [
            "6d51d6d4d238596a",
            "5d4e2536bd217ebb"
        ],
        "x": 420,
        "y": 765,
        "wires": [
            [
                "f8d4de8ef89ccdb9"
            ]
        ]
    },
    {
        "id": "27fd41b42aa48c45",
        "type": "comment",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "initCarts",
        "info": "",
        "x": 465,
        "y": 720,
        "wires": []
    },
    {
        "id": "8a869fbf2653f1a4",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "initCharts out",
        "mode": "link",
        "links": [
            "e9e53285a6bea3a0",
            "8592536a56dff0ec"
        ],
        "x": 1125,
        "y": 765,
        "wires": []
    },
    {
        "id": "790069aedc4c5ebe",
        "type": "debug",
        "z": "76b05f87a5290cf6",
        "g": "2007df0d560bc337",
        "name": "DB INPUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 795,
        "y": 810,
        "wires": []
    },
    {
        "id": "7103451c8f1ce3d3",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "name": "uib request in",
        "links": [
            "16c03e6dc270a0a8"
        ],
        "x": 205,
        "y": 480,
        "wires": [
            [
                "d6a1db03463f5561"
            ]
        ],
        "l": true
    },
    {
        "id": "d6a1db03463f5561",
        "type": "switch",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "initCharts",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 480,
        "wires": [
            [
                "5d4e2536bd217ebb"
            ],
            [
                "8c87150121a07852"
            ]
        ],
        "l": false
    },
    {
        "id": "8c87150121a07852",
        "type": "function",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "name": "default: warn",
        "func": "\nglobal.get(\"utils\").errorBlink(node, 60000);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 505,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5d4e2536bd217ebb",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "g": "9eae3823833d4d69",
        "name": "initChart",
        "mode": "link",
        "links": [
            "ca2b9f6d1617d974"
        ],
        "x": 570,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "8592536a56dff0ec",
        "type": "link in",
        "z": "76b05f87a5290cf6",
        "g": "9eae3823833d4d69",
        "name": "initChart in",
        "links": [
            "8a869fbf2653f1a4"
        ],
        "x": 645,
        "y": 480,
        "wires": [
            [
                "fa5fe09d4f7a35d0"
            ]
        ]
    },
    {
        "id": "3f92af885fe4a9d4",
        "type": "link out",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "name": "webapp out",
        "mode": "link",
        "links": [
            "29da4c340c1c0f16"
        ],
        "x": 1100,
        "y": 465,
        "wires": [],
        "l": true
    },
    {
        "id": "fa5fe09d4f7a35d0",
        "type": "switch",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "name": "has _socketId",
        "property": "_socketId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 920,
        "y": 480,
        "wires": [
            [
                "3f92af885fe4a9d4"
            ],
            [
                "d0045f77b9afb1af"
            ]
        ]
    },
    {
        "id": "d0045f77b9afb1af",
        "type": "function",
        "z": "76b05f87a5290cf6",
        "g": "d1418df470ae9fa4",
        "name": "error",
        "func": "node.error({txt:\"missing _socketId\",fullMsg:msg});\n\nglobal.get(\"utils\").errorBlink(node, 60000);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 495,
        "wires": [
            []
        ]
    },
    {
        "id": "983f631919dfd7ae",
        "type": "mysql",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "name": "",
        "x": 1000,
        "y": 1650,
        "wires": [
            []
        ]
    },
    {
        "id": "49bbe311b738bad2",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "name": "composeBigEndian",
        "func": "msg.payload=(msg.payload[1]<<16) | msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1035,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "19871229e6b3c13c",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "name": "composeLittleEndian",
        "func": "msg.payload=(msg.payload[0]<<16) | msg.payload[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 1695,
        "wires": [
            []
        ]
    },
    {
        "id": "15d1712c48b60144",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1740,
        "wires": [
            [
                "ae29b121eba5b701",
                "ac81c47e04b26af5"
            ]
        ]
    },
    {
        "id": "ae29b121eba5b701",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "testsToBeKept",
        "func": "let str=\"a string\";\nlet a=1;\nlet a_plusPlus=context.a++;\nlet b = context.set(\"var\")\nnode.warn({b:b,t:b===undefined});\n\n\nreturn {\n    \"p\":context.p,\n    \"p2\":context.get(\"p2\"),\n    \"p3\": flow.p3,\n    \"p23\": flow.get(\"p23\"),\n    \"p4\": global.p4,\n    \"p24\": global.get(\"p24\"),\n    \"xp\": context.p2,\n    \"xp2\": context.get(\"p\"),\n    \"xp3\": flow.p23,\n    \"xp23\": flow.get(\"p3\"),\n    \"xp4\": global.p24,\n    \"xp24\": global.get(\"p4\"),\n    \"strInJs\":str,\n    \"a_plusPlus\": a_plusPlus,\n    \"a_plusPlusInJs\": a++,\n    \"plusplus_aInJs\": ++a,\n    \"f\": flow.get(\"f\"),\n    \"param\": flow.get(\"f\")(\"a string\",context),\n    \"f msg\":context.msg,\n    \"f set msg\": context.get(\"msg\"),\n    \"f set this msg\": context.get(\"msg3\"),\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.p = \"p\";\ncontext.set(\"p2\", \"p2\");\nflow.p3 = \"p3\";\nflow.set(\"p23\", \"p23\");\nglobal.p4 = \"p4\";\nglobal.set(\"p24\", \"p24\");\ncontext.msg = \"\";\n\nflow.set(\"f\",function (param, contx){\n    context.msg = \"f msg\";\n    context.set(\"msg\",\"f msg\");\n    contx.set(\"msg3\",\"f msg3\");\n    \n    //context.displayError(param,25);\n    return param+\" ret\";\n});\n\nfunction badDef(str){\n    return str;\n}",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1740,
        "wires": [
            [
                "252a1e640d0f1c0b"
            ]
        ]
    },
    {
        "id": "ac81c47e04b26af5",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$globalContext(\"MWQuery\"){\t\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 1700,
        "wires": [
            [
                "4cdb3c3bf46563d8"
            ]
        ]
    },
    {
        "id": "252a1e640d0f1c0b",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "testsToBeKept",
        "func": "let str = \"a string\";\nlet a = 1;\nlet a_plusPlus = context.a++;\n\nreturn {\n    \"p\": context.p,\n    \"p2\": context.get(\"p2\"),\n    \"p3\": flow.p3,\n    \"p23\": flow.get(\"p23\"),\n    \"p4\": global.p4,\n    \"p24\": global.get(\"p24\"),\n    \"xp\": context.p2,\n    \"xp2\": context.get(\"p\"),\n    \"xp3\": flow.p23,\n    \"xp23\": flow.get(\"p3\"),\n    \"xp4\": global.p24,\n    \"xp24\": global.get(\"p4\"),\n    \"strInJs\": str,\n    \"a_plusPlus\": a_plusPlus,\n    \"a_plusPlusInJs\": a++,\n    \"plusplus_aInJs\": ++a,\n    \"f\": flow.get(\"f\"),\n    \"param\": flow.get(\"f\")(\"a string\", context),\n    \"f msg\": context.msg,\n    \"f set msg\": context.get(\"msg\"),\n    \"f set this msg\": context.get(\"msg3\"),\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1740,
        "wires": [
            [
                "3a219ed0af97dddf"
            ]
        ]
    },
    {
        "id": "4cdb3c3bf46563d8",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1680,
        "wires": []
    },
    {
        "id": "3a219ed0af97dddf",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1740,
        "wires": []
    },
    {
        "id": "f17b02b8bcb19efd",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1800,
        "wires": []
    },
    {
        "id": "c28bf5814e72a1da",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1800,
        "wires": [
            [
                "9ee36af3597985b4"
            ]
        ]
    },
    {
        "id": "9ee36af3597985b4",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "testsToBeKept",
        "func": "let str = \"a string\";\nlet a = 1;\nlet a_plusPlus = context.a++;\n\nreturn {\n    \"p\": context.p,\n    \"p2\": context.get(\"p2\"),\n    \"p3\": flow.p3,\n    \"p23\": flow.get(\"p23\"),\n    \"p4\": global.p4,\n    \"p24\": global.get(\"p24\"),\n    \"xp\": context.p2,\n    \"xp2\": context.get(\"p\"),\n    \"xp3\": flow.p23,\n    \"xp23\": flow.get(\"p3\"),\n    \"xp4\": global.p24,\n    \"xp24\": global.get(\"p4\"),\n    \"strInJs\": str,\n    \"a_plusPlus\": a_plusPlus,\n    \"a_plusPlusInJs\": a++,\n    \"plusplus_aInJs\": ++a,\n    \"f\": flow.get(\"f\"),\n    \"param\": flow.get(\"f\")(\"a string\", context),\n    \"f msg\": context.msg,\n    \"f set msg\": context.get(\"msg\"),\n    \"f set this msg\": context.get(\"msg3\"),\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1800,
        "wires": [
            [
                "f17b02b8bcb19efd"
            ]
        ]
    },
    {
        "id": "dfe4876ea0615980",
        "type": "comment",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "TEST FUNZIONALITA'",
        "info": "",
        "x": 250,
        "y": 1640,
        "wires": []
    },
    {
        "id": "cca09e5584ef886c",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "regex",
        "func": "\n\n//  regex per estrarre json da export dei DDT\n//  https://regex101.com/r/3rFhWf/\n//  .*<variables[^\"]+\"([^\"]+)\"[^\"]+\"([^\"]+)\"[^\\/]*(?:<comment>(.*)<\\/comment>)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 755,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "41547953e1174a36",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1860,
        "wires": [
            [
                "7d815369a4f9dec4"
            ]
        ]
    },
    {
        "id": "7d815369a4f9dec4",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "asyncAccess",
        "func": "context.set(\"myVar\",\"ok\",(err)=>{if(err)node.error(\"someError A\")});\n\nsetTimeout(() => {\n    context.set(\"a\", \"ok\");\n    context.set(\"myVarA\", \"okA\", (err) => { if (err) node.error(\"someError A\") });\n}, 100);\n\nsetTimeout((c) => {\n    c.set(\"b\", \"ok\")\n    c.set(\"myVarB\", \"okB\", (err) => { if (err) node.error(\"someError B\") });\n}, 100,context);\n\ncontext.set(\"c\", \"ok\",function (err){\n    if(err)\n        node.error(\"see source. case 'c' \");\n    else{\n        node.warn(\"all good\");\n        context.set(\"myVarC\", \"okC\", (err) => { if (err) node.error(\"someError C\") });\n        context.set(\"myVarC2\", \"okC2\");\n        context.set(\"myVarC3\", context.get(\"myVar\"));\n    }\n    setTimeout(() => {\n        context.set(\"d\", \"ok\", function (err) {\n            if (err)\n                node.error(\"see source. case 'd' \");\n            else {\n                context.set(\"myVarD\", \"okD\", (err) => { if (err) node.error(\"someDrror D\") });\n                context.set(\"myVarD2\", \"okD2\");\n                if (context.get(\"myVar\"))\n                    flow.set(\"myVarD3\", \"seen\");\n            }\n        });\n\n        context.set(\"myVarD4\", \"okD4\");\n    }, 100);\n});\n\nsetTimeout(() => {\n    context.set(\"e\", \"ok\", function (err) {\n        if (err)\n            node.error(\"see source. case 'e' \");\n        else {\n            context.set(\"myVarE\", \"okE\", (err) => { if (err) node.error(\"someError E\") });\n            context.set(\"myVarE2\", \"okE2\");\n            if (context.get(\"myVar\"))\n                flow.set(\"myVarE3\", \"seen\");\n        }\n    });\n}, 100);\nlet waitFor = Date.now() + 2000;\nlet start=Date.now();\nlet fake=0;\nwhile(Date.now()<waitFor){\n    fake+=Math.random();\n}\nnode.warn(\"waited for \" + (waitFor-start) +\"ms\");\n\nreturn {\n    direct: context.get(\"a\"),\n    dir_varBuiltSet: context.get(\"myVarA\"),\n\n    throughParam: context.get(\"b\"),\n    param_varBuiltSet: context.get(\"myVarB\"),\n\n    withBuiltIn: context.get(\"c\"),\n    built_VarBuiltSet: context.get(\"myVarC\"),\n    built_VarDirectSet: context.get(\"myVarC2\"),\n    built_VarDirectGet: context.get(\"myVarC3\"),\n\n    withBuiltIn_AsyncSet: context.get(\"d\"),\n    built_VarBuiltAsSet: context.get(\"myVarD\"),\n    built_VarDirectAsSet: context.get(\"myVarD2\"),\n    built_VarDirectAsGet: flow.get(\"myVarD3\"),\n    built_VarDirectAsGet4: flow.get(\"myVarD4\"),\n\n    directOnBuilt: context.get(\"e\"),\n    dirOnBuilt_VarBuiltSet: context.get(\"myVarE\"),\n    dirOnBuilt_VarDirectSet: context.get(\"myVarE2\"),\n    dirOnBuilt_VarDirectGet: flow.get(\"myVarE3\"),\n};\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1860,
        "wires": [
            [
                "c8ee96d3de3d3f40"
            ]
        ]
    },
    {
        "id": "c8ee96d3de3d3f40",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1860,
        "wires": []
    },
    {
        "id": "71b7faf956909c17",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "asyncAccess",
        "func": "//le modifiche a context fatte in async non sono visibili fino al prossimo messaggio.\n\ncontext.set(\"v\",\"okv\",(err)=>{if(err)node.error(\"someError A\")});\n\nsetTimeout(() => {\n    context.set(\"a\", (context.get(\"v\")||\"oka\"));\n    context.set(\"vA\", (context.get(\"v\") ||\"okvA\") , (err) => { if (err) node.error(\"someError A\") });\n}, 100);\n\nsetTimeout((c) => {\n    c.set(\"b\", \"okb\")\n    c.set(\"vB\", \"okvB\", (err) => { if (err) node.error(\"someError B\") });\n}, 100,context);\n\nsetTimeout(() => {\n    context.set(\"a\", (context.get(\"a\")||\"\")+\" edit\");\n    context.set(\"vA\", \"okvA\", (err) => { if (err) node.error(\"someError vA\") });\n}, 100);\n\nlet waitFor = Date.now() + 2000;\nlet start = Date.now();\nlet fake = 0;\nwhile (Date.now() < waitFor) {\n    fake += Math.random();\n}\nnode.warn(\"waited for \" + (waitFor - start) + \"ms\");\n\nlet ret = {\n    tout_direct: context.get(\"a\"),\n    tout_asySet: context.get(\"vA\"),\n    tout_throughParam: context.get(\"b\"),\n    getAsy:[\n        context.get(\"a\", (err) => { if (err) node.error(\"someError gA\") }),\n        context.get(\"vA\", (err) => { if (err) node.error(\"someError gvA\") })\n    ],\n}\nsetTimeout(() => {\n    node.send({tout: \n    {\n        tout_direct: context.get(\"a\"),\n        tout_asySet: context.get(\"vA\"),\n        tout_throughParam: context.get(\"b\"),\n        getAsy: [\n            context.get(\"a\", (err) => { if (err) node.error(\"someError gA\") }),\n            context.get(\"vA\", (err) => { if (err) node.error(\"someError gvA\") })\n        ],\n    }\n    });\n}, 1000);\n\nreturn ret;\n\n/*\ncontext.set(\"c\", \"ok\",function (err){\n    if(err)\n        node.error(\"see source. case 'c' \");\n    else{\n        node.warn(\"all good\");\n        context.set(\"myVarC\", \"okC\", (err) => { if (err) node.error(\"someError C\") });\n        context.set(\"myVarC2\", \"okC2\");\n        context.set(\"myVarC3\", context.get(\"myVar\"));\n    }\n    setTimeout(() => {\n        context.set(\"d\", \"ok\", function (err) {\n            if (err)\n                node.error(\"see source. case 'd' \");\n            else {\n                context.set(\"myVarD\", \"okD\", (err) => { if (err) node.error(\"someDrror D\") });\n                context.set(\"myVarD2\", \"okD2\");\n                if (context.get(\"myVar\"))\n                    flow.set(\"myVarD3\", \"seen\");\n            }\n        });\n\n        context.set(\"myVarD4\", \"okD4\");\n    }, 100);\n});\n\nsetTimeout(() => {\n    context.set(\"e\", \"ok\", function (err) {\n        if (err)\n            node.error(\"see source. case 'e' \");\n        else {\n            context.set(\"myVarE\", \"okE\", (err) => { if (err) node.error(\"someError E\") });\n            context.set(\"myVarE2\", \"okE2\");\n            if (context.get(\"myVar\"))\n                flow.set(\"myVarE3\", \"seen\");\n        }\n    });\n}, 100);\nlet waitFor = Date.now() + 2000;\nlet start=Date.now();\nlet fake=0;\nwhile(Date.now()<waitFor){\n    fake+=Math.random();\n}\nnode.warn(\"waited for \" + (waitFor-start) +\"ms\");\n\nreturn {\n    direct: context.get(\"a\"),\n    dir_varBuiltSet: context.get(\"myVarA\"),\n\n    throughParam: context.get(\"b\"),\n    param_varBuiltSet: context.get(\"myVarB\"),\n\n    withBuiltIn: context.get(\"c\"),\n    built_VarBuiltSet: context.get(\"myVarC\"),\n    built_VarDirectSet: context.get(\"myVarC2\"),\n    built_VarDirectGet: context.get(\"myVarC3\"),\n\n    withBuiltIn_AsyncSet: context.get(\"d\"),\n    built_VarBuiltAsSet: context.get(\"myVarD\"),\n    built_VarDirectAsSet: context.get(\"myVarD2\"),\n    built_VarDirectAsGet: flow.get(\"myVarD3\"),\n    built_VarDirectAsGet4: flow.get(\"myVarD4\"),\n\n    directOnBuilt: context.get(\"e\"),\n    dirOnBuilt_VarBuiltSet: context.get(\"myVarE\"),\n    dirOnBuilt_VarDirectSet: context.get(\"myVarE2\"),\n    dirOnBuilt_VarDirectGet: flow.get(\"myVarE3\"),\n};\n\nreturn;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1905,
        "wires": [
            [
                "c8ee96d3de3d3f40"
            ]
        ]
    },
    {
        "id": "649bb151d51e764d",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1905,
        "wires": [
            [
                "71b7faf956909c17"
            ]
        ]
    },
    {
        "id": "13ab8d445c1e80e2",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "asyncTrial",
        "func": "//le modifiche a context fatte in async non sono visibili fino al prossimo messaggio.\ncontext.set(\"cc\",context.get(\"cc\")||0);\n\nvar x = setTimeout(() => {\n    node.warn(\"triggered X\");\n}, 1000);\nclearTimeout(x);\n\n\nlet a = setTimeout(() => {\n    var y = setTimeout(() => {\n        node.warn(\"triggered sub y\");\n    }, 1000);\n\n    context.set(\"y\", y)\n    node.warn(\"triggered Y\");\n}, 1000);\n\nsetTimeout(() => {\n    clearTimeout(context.get(\"y\")??node.warn(\"error\"));\n}, 1400);\n\n\n//clearTimeout(a);\n//clearTimeout(context.get(\"y\"));\n\n\n//works~ //()=>{} share the definer's scope, let defined are still accessible after the function node has finished.\nlet state=false;\nconst intv = setInterval(() => {\n    node.warn({txt:\"called with\",st:state,intv:intv});\n    if(state){\n        node.warn(\"state true, clearing..\");\n        clearInterval(intv)\n    }\n},2000);\n\nsetTimeout(()=>{node.warn(\"setting state to true\");state=true},3000);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1950,
        "wires": [
            [
                "c8ee96d3de3d3f40"
            ]
        ]
    },
    {
        "id": "55e7b1fcf215488e",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "5bcc1c5114f00806",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1950,
        "wires": [
            [
                "13ab8d445c1e80e2"
            ]
        ]
    },
    {
        "id": "6e11ca5816678aff",
        "type": "ui_multistate_switch",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "toggle polling mode",
        "group": "0c8027c5cce32f61",
        "order": 4,
        "width": "13",
        "height": "1",
        "label": " secondi",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "solo inverter",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "solo pm500",
                "value": "2",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "solo pm2350",
                "value": "3",
                "valueType": "num",
                "color": "#009999"
            },
            {
                "label": "tutti",
                "value": "all",
                "valueType": "str",
                "color": "#cccc00"
            }
        ],
        "topic": "",
        "x": 445,
        "y": 690,
        "wires": [
            [
                "1464ee495f119867"
            ]
        ]
    },
    {
        "id": "eaa055ba0bfe8209",
        "type": "trigger",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "rs msg.delay",
        "op1": "true",
        "op2": "0",
        "op1type": "bool",
        "op2type": "str",
        "duration": "-1000",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "off",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 815,
        "y": 660,
        "wires": [
            [
                "7eec56878e74f81d"
            ]
        ]
    },
    {
        "id": "92f9ab29a8b8f215",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "delay",
                "v": "1000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 635,
        "y": 615,
        "wires": [
            [
                "eaa055ba0bfe8209"
            ]
        ]
    },
    {
        "id": "f7aa3a5ee94581d8",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "830ffb7ad83476f7",
            "b387e43f2834f0b5",
            "e4466d0ee4a7c225"
        ],
        "x": 1105,
        "y": 675,
        "wires": []
    },
    {
        "id": "465a56cb5ae37a7b",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "830ffb7ad83476f7"
        ],
        "x": 1075,
        "y": 585,
        "wires": []
    },
    {
        "id": "4b32101b94305fad",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "b387e43f2834f0b5"
        ],
        "x": 1075,
        "y": 615,
        "wires": []
    },
    {
        "id": "eca3f783e09f6088",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "e4466d0ee4a7c225"
        ],
        "x": 1075,
        "y": 645,
        "wires": []
    },
    {
        "id": "7eec56878e74f81d",
        "type": "switch",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 955,
        "y": 660,
        "wires": [
            [],
            [
                "465a56cb5ae37a7b"
            ],
            [
                "4b32101b94305fad"
            ],
            [
                "eca3f783e09f6088"
            ],
            [
                "f7aa3a5ee94581d8"
            ],
            [
                "0fed6df359c670f3"
            ]
        ],
        "l": false
    },
    {
        "id": "0fed6df359c670f3",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "warning",
        "func": "throw new Error(\"unknown switch state\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1075,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8a7581d12692fcfa",
        "type": "ui_numeric",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "poll interval",
        "label": "ricarica ogni",
        "tooltip": "imposta intervallo di polling",
        "group": "0c8027c5cce32f61",
        "order": 3,
        "width": "5",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "interval",
        "topicType": "str",
        "format": "{{msg.payload}}",
        "min": "5",
        "max": "60",
        "step": "0.5",
        "className": "",
        "x": 215,
        "y": 630,
        "wires": [
            [
                "1464ee495f119867",
                "79cb428099fa1515"
            ]
        ]
    },
    {
        "id": "6abeeffb9f17c15c",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "OnStartup0.1: 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "interval",
        "payload": "5",
        "payloadType": "num",
        "x": 215,
        "y": 585,
        "wires": [
            [
                "8a7581d12692fcfa"
            ]
        ]
    },
    {
        "id": "1464ee495f119867",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "setDelay",
        "func": "if(msg.topic==\"interval\")\n    context.set(\"interval\",msg.payload);\nelse{\n    msg.delay=(context.get(\"interval\") ?? 5) * 1000;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 660,
        "wires": [
            [
                "eaa055ba0bfe8209"
            ]
        ]
    },
    {
        "id": "79cb428099fa1515",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "change Label",
        "rules": [
            {
                "t": "set",
                "p": "label",
                "pt": "msg",
                "to": "\"ricarica ogni arawa secondi\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "secs",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "notExistant",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 225,
        "y": 690,
        "wires": [
            [
                "6e11ca5816678aff"
            ]
        ]
    },
    {
        "id": "fd596e236db59b07",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "e02b6f382a6c8813",
        "name": "OnStartup0.1: off",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 235,
        "y": 735,
        "wires": [
            [
                "6e11ca5816678aff"
            ]
        ]
    },
    {
        "id": "9056d3c89eaf484d",
        "type": "comment",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "042f83e60bf4b2b4",
        "name": "Sticky Menu: modbus trail and refresh polling",
        "info": "",
        "x": 260,
        "y": 240,
        "wires": []
    },
    {
        "id": "b757185d480921ba",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status.fill",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "reference",
                "pt": "msg",
                "to": "status.text",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 175,
        "y": 360,
        "wires": [
            [
                "fd379269ea194a8c"
            ]
        ],
        "l": false
    },
    {
        "id": "66fc5d7cfed02395",
        "type": "link in",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "ModBus trail IN",
        "links": [
            "87cee062cd247351"
        ],
        "x": 130,
        "y": 360,
        "wires": [
            [
                "b757185d480921ba"
            ]
        ]
    },
    {
        "id": "a7c280bcddb31c7e",
        "type": "ui_statetrail",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "group": "0c8027c5cce32f61",
        "order": 2,
        "width": "9",
        "height": "2",
        "name": "ModBusTrail short",
        "label": "Modbus Status",
        "states": [
            {
                "state": "green",
                "col": "#009933",
                "t": "str",
                "label": "ready"
            },
            {
                "state": "yellow",
                "col": "#cddb06",
                "t": "str",
                "label": "busy"
            },
            {
                "state": "red",
                "col": "#ff6666",
                "t": "str",
                "label": "error"
            },
            {
                "state": "space",
                "col": "#ffffff",
                "t": "str",
                "label": ""
            }
        ],
        "periodLimit": "30",
        "periodLimitUnit": "1",
        "timeformat": "ss",
        "tickmarks": "12",
        "persist": false,
        "legend": "0",
        "combine": true,
        "blanklabel": "Waiting Data",
        "x": 775,
        "y": 360,
        "wires": [
            [
                "131215b1356c2711",
                "0a569519a6946703"
            ]
        ]
    },
    {
        "id": "e0e7d487cb6155da",
        "type": "ui_statetrail",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "group": "0c8027c5cce32f61",
        "order": 1,
        "width": "16",
        "height": "2",
        "name": "ModBusTrail long",
        "label": "Modbus Status",
        "states": [
            {
                "state": "green",
                "col": "#009933",
                "t": "str",
                "label": "ready"
            },
            {
                "state": "yellow",
                "col": "#cddb06",
                "t": "str",
                "label": "busy"
            },
            {
                "state": "red",
                "col": "#ff6666",
                "t": "str",
                "label": "error"
            },
            {
                "state": "space",
                "col": "#ffffff",
                "t": "str",
                "label": ""
            }
        ],
        "periodLimit": "4",
        "periodLimitUnit": "60",
        "timeformat": "mm:ss",
        "tickmarks": "12",
        "persist": false,
        "legend": "2",
        "combine": true,
        "blanklabel": "Waiting Data",
        "x": 775,
        "y": 420,
        "wires": [
            [
                "0a569519a6946703"
            ]
        ]
    },
    {
        "id": "40aa2bf78c7edcb3",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "fix scale",
        "func": "let p=5; //period time in minutes\nif ((context.get(\"lastTime\") || 0) + 60 * p >= Date.now) {\n    node.send({ payload: { state: \"space\", timestamp: Date.now() + 100 - p * 60 * 1000 } });\n    context.set(\"lastTime\", Date.now());\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.send({ payload: { state: \"space\", timestamp: Date.now()} });",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "e0e7d487cb6155da"
            ]
        ]
    },
    {
        "id": "5f6c10280d9d54a1",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "fix scale",
        "func": "let p=0.5; //period time in minutes\nif( (context.get(\"lastTime\")||0) +60*p >= Date.now){\n    node.send({payload:{ state: \"space\", timestamp: Date.now()+100-p*60*1000 }});\n    context.set(\"lastTime\",Date.now());\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 360,
        "wires": [
            [
                "a7c280bcddb31c7e"
            ]
        ]
    },
    {
        "id": "131215b1356c2711",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 985,
        "y": 345,
        "wires": []
    },
    {
        "id": "0a569519a6946703",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "function 1",
        "func": "\nlet d=new Date(msg.payload.timestamp);\nlet millis = d.getMilliseconds();\nlet pre=\"\";\nfor(let i=0;i>3;i++)\n    if(millis<10*i)\n        pre+=\"0\";\nmillis = pre+millis;\nmsg.menu=[\n    {\n        text: \"state: \"+(msg.payload.label||\"\"),\n        enabled: true,\n        icon: \"\",\n    },\n    {\n        text: \"time: \" + `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}.${millis}`,\n        enabled: true,\n        icon: \"\",\n    },\n    {\n        text: \"duration: \" + (msg.payload.duration) + \"ms\",\n        enabled: true,\n        icon: \"\",\n    }\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 390,
        "wires": [
            [
                "decb29c9608e58af"
            ]
        ],
        "l": false
    },
    {
        "id": "e0da6226ebca68e1",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "delay",
        "func": "if(!context.get(\"firstArrival\"))\n    context.set(\"firstArrival\",Date.now());\n\nif(context.get(\"firstArrival\") < Date.now()-30*1000)\n    return { payload: { state: \"space\", timestamp: Date.now() } }\nelse\n    setTimeout(\"node.send(msg)\",30*1000);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 465,
        "wires": [
            [
                "40aa2bf78c7edcb3"
            ]
        ]
    },
    {
        "id": "3d6b849bfb2b2f51",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "space On NoInput",
        "func": "\nfunction sendSpaceAfter_aBitMoreOn1st(firstDelay, then) {\n    return setTimeout(() => {\n        node.send({ payload: { state: \"space\", timestamp: Date.now()-(firstDelay-then) } });\n        context.set(\"timeoutObj\", sendSpaceAfter(then));\n    }, firstDelay);\n}\n\nfunction sendSpaceAfter(delay) {\n    return setTimeout(() => {\n        node.send({ payload: { state: \"space\", timestamp: Date.now() } });\n        context.set(\"timeoutObj\", sendSpaceAfter(delay));\n    }, delay);\n}\n\nclearTimeout(context.get(\"timeoutObj\")??node.warn(\"error\"));\ncontext.set(\"timeoutObj\", sendSpaceAfter_aBitMoreOn1st(1500,1000));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nfunction sendSpaceAfter_aBitMoreOn1st(firstDelay,then) {\n    return setTimeout(() => {\n        node.send({ payload: { state: \"space\", timestamp: Date.now() } });\n        context.set(\"timeoutObj\", sendSpaceAfter(then));\n    }, firstDelay);\n}\n\nfunction sendSpaceAfter(delay) {\n    return setTimeout(() => {\n        node.send({ payload: { state: \"space\", timestamp: Date.now() } });\n        context.set(\"timeoutObj\",sendSpaceAfter(delay));\n    }, delay);\n}\n\ncontext.set(\"timeoutObj\", sendSpaceAfter_aBitMoreOn1st(1500,1000));",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "40aa2bf78c7edcb3",
                "3812bcc095cbdfe5"
            ]
        ]
    },
    {
        "id": "2835c333a07183bd",
        "type": "delay",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 420,
        "wires": [
            [
                "3d6b849bfb2b2f51"
            ]
        ],
        "l": false
    },
    {
        "id": "fd379269ea194a8c",
        "type": "trigger",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "rs 1000ms",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-1000",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "2835c333a07183bd",
                "5f6c10280d9d54a1"
            ]
        ]
    },
    {
        "id": "decb29c9608e58af",
        "type": "ui_context_menu",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "group": "99f2c2efd09d4b82",
        "order": 5,
        "width": 0,
        "height": -1,
        "fontSize": 16,
        "inputPositionXField": "event.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "event.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "msg",
        "menuItems": [
            {
                "id": "0",
                "icon": "fa-home",
                "label": "someLabel",
                "topic": "aTopic",
                "payload": "thisWasSent",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "1",
                "icon": "fa-clip",
                "label": "awdawd",
                "topic": "aTopic2",
                "payload": "otherMsg",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": "-1",
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": false,
        "stopTimerAtEnter": false,
        "name": "",
        "x": 1040,
        "y": 390,
        "wires": [
            []
        ]
    },
    {
        "id": "d654a92c108d7cf7",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 775,
        "y": 465,
        "wires": []
    },
    {
        "id": "3812bcc095cbdfe5",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.state",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 465,
        "wires": [
            [
                "d654a92c108d7cf7"
            ]
        ]
    },
    {
        "id": "6bd020121fe4161b",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "d4e564eac59f8117",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "3d6b849bfb2b2f51"
            ]
        ],
        "l": false
    },
    {
        "id": "3cf1218795abc823",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "9bcec7222119e8a3",
        "name": "map & merge",
        "func": "\n//in payload si trovano nome,tipo e commento di n COPPIE di celle, o %MW.\n//  all' indice i corrisponderà la cella 4400+2*i. la variabile potrebbe però essere di un solo byte.\n//in msg.buffer si trova il buffer di byte letto //class:  https://nodejs.org/api/buffer.html\n\n//byte order: da 2301 a 3210 //il plc salva le singole coppie di byte in LittleEndian, mentre la coppia di coppie come BigEndian. (originale: 0123 -> 01,23 -> 23,01 :inMemoria)\nfor (let i = 0, tmp, buf = msg.buffer; i < buf.length - 1; i += 2) {\n    tmp = buf[i];\n    buf[i] = buf[i + 1];\n    buf[i + 1] = tmp;\n}\n//usa la\nvar err;\nfor (let i = 0; msg.payload[i] !== undefined; i++) {\n    \n    msg.payload[i].address = msg.addressOffset + 2 * i;\n    \n\n    if (msg.buffer[2 * i] === undefined || msg.buffer[2 * i + 1] === undefined || msg.buffer[2 * i] === null || msg.buffer[2 * i + 1] === null) {\n        if(!err) err={};\n        if (err.missingDataException === undefined)\n            err.missingDataException = {};\n        err.missingDataException[\"at_idx_\" + i] = msg.buffer;\n        msg.payload.value = \"missing\";\n        msg.payload.rawValue = \"missing\";\n    }\n    else{\n        msg.payload[i].rawValue = \"0x\" + msg.buffer.readUint32LE(4 * i).toString(16);\n        switch (msg.payload[i].type.toUpperCase()) {\n            case \"UINT\": {\n                msg.payload[i].value = msg.buffer.readUint16LE(4*i);\n                break;\n            }\n            case \"UDINT\": {\n                msg.payload[i].value = msg.buffer.readUint32LE(4 * i);\n                break;\n            }\n            case \"INT\": {\n                msg.payload[i].value = msg.buffer.readInt16LE(4 * i);\n                break;\n            }\n            case \"DINT\": {\n                msg.payload[i].value = msg.buffer.readInt32LE(4 * i);\n                break;\n            }\n            case \"REAL\": {\n                msg.payload[i].value = msg.buffer.readFloatLE(4*i).toPrecision(7);\n                break;\n            }\n            default: {\n                if (!err) err = {};\n                if(err.unknownTyperException===undefined)\n                    err.unknownTypeException= {};\n                err.unknownTypeException[\"at_idx_\" + i] = msg.payload[i].type;\n                \n                msg.payload[i].value = \"unkType\";\n            }\n        }\n\n    }\n}\nif(err)\n    node.warn(err);\nreturn msg;\n\n/* msg.payload=msg.payload.map((val,idx,arr)=>{ arr[idx].address=4400+2*idx });\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 905,
        "y": 1065,
        "wires": [
            [
                "2b0d893e266ba428"
            ]
        ]
    },
    {
        "id": "f6905ffb8eab6a25",
        "type": "link in",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "9bcec7222119e8a3",
        "name": "DDT table map&merge",
        "links": [],
        "x": 795,
        "y": 1065,
        "wires": [
            [
                "3cf1218795abc823"
            ]
        ]
    },
    {
        "id": "2b0d893e266ba428",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "9bcec7222119e8a3",
        "name": "link out 6",
        "mode": "return",
        "links": [],
        "x": 1020,
        "y": 1065,
        "wires": []
    },
    {
        "id": "a5c6292ed1672889",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "59b9575558a87ab8",
        "name": "warnOnChange",
        "func": "//compara l'ultima lettura da inverter con quella corrente\n//msg.payload: arr of obj {name, comment,value:num, rawvalue:Str, ..} //result of f() map&merge\n\nif(msg.origin === undefined) node.error({err:\"forgot to set msg.origin for \", msg:msg})\nconst lastData = context.get(msg.origin+\"_lastData\") ?? [];\ncontext.set(msg.origin + \"_lastData\", msg.payload);\n\nif (msg.payload.length != lastData.length)\n    node.warn(\"length mismatch between data: \" + msg.payload.length + \"!=\"+ lastData.length);\n\n\nlet changed={length:0};\n\nfor(let i=0; i<msg.payload.length && i<lastData.length; i++){\n    let newD = msg.payload[i];\n    let lastD = lastData[i];\n\n    if( newD.value != lastD.value\n    || newD.rawValue != lastD.rawValue){\n        changed[newD.name]={add:4400,from:newD.value,to:lastD.value,raws:newD.rawValue+\" -> \"+lastD.rawValue}\n        changed.length++;\n    }\n}\n\nif(changed.length){\n    node.warn(changed);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1095,
        "y": 930,
        "wires": [
            [
                "732e9e9a5be95374"
            ]
        ]
    },
    {
        "id": "83ea5f07872402eb",
        "type": "gate",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "59b9575558a87ab8",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 970,
        "y": 930,
        "wires": [
            [
                "a5c6292ed1672889"
            ]
        ],
        "l": false
    },
    {
        "id": "732e9e9a5be95374",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "59b9575558a87ab8",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "1df35f685bbae5dc",
            "e8845b1f1b31012c",
            "d69fdd484799a13d"
        ],
        "x": 1225,
        "y": 930,
        "wires": []
    },
    {
        "id": "06e8b2a3bf45c64b",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "59b9575558a87ab8",
        "name": "toggle",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "toggle",
        "payloadType": "str",
        "x": 885,
        "y": 900,
        "wires": [
            [
                "83ea5f07872402eb"
            ]
        ]
    },
    {
        "id": "e16f5eb91fb5c4b4",
        "type": "link in",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "59b9575558a87ab8",
        "name": "warnOnChange",
        "links": [
            "7905b0dc5437c385",
            "d9b73c125a41e985",
            "6cdb9924b36e6d80"
        ],
        "x": 910,
        "y": 945,
        "wires": [
            [
                "83ea5f07872402eb"
            ]
        ]
    },
    {
        "id": "4589e135e62180d5",
        "type": "ui_button",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "refresh allInverterDDT table",
        "group": "0333a97ebf4d364e",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "interroga nuovamente il PLC \\n recuperando tutti i dati",
        "color": "green",
        "bgcolor": "light-blue",
        "className": "button",
        "icon": "autorenew",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 375,
        "y": 1200,
        "wires": [
            [
                "5f7d9434ee851d46"
            ]
        ]
    },
    {
        "id": "78d83f5060d67324",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 225,
        "y": 1200,
        "wires": [
            [
                "4589e135e62180d5"
            ]
        ],
        "l": false
    },
    {
        "id": "f60ed334182c339f",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "buffer",
                "pt": "msg",
                "to": "payload.buffer",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "addressOffset",
                "pt": "msg",
                "to": "4400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1275,
        "wires": [
            [
                "b116d599b6b0916d"
            ]
        ]
    },
    {
        "id": "3a58a38948ea94e8",
        "type": "ui_table",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "group": "0333a97ebf4d364e",
        "name": "allInverterDDT Table",
        "order": 7,
        "width": "25",
        "height": "24",
        "columns": [
            {
                "field": "index",
                "title": "#",
                "width": "3em",
                "align": "center",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "address",
                "title": "address",
                "width": "5ch",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "type",
                "width": "8em",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rawValue",
                "title": "raw",
                "width": "12ch",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "name",
                "width": "16em",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "value",
                "width": "8ch",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "comment",
                "title": "comment",
                "width": "30em",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1120,
        "y": 1350,
        "wires": [
            []
        ]
    },
    {
        "id": "5f7d9434ee851d46",
        "type": "function",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "send allInverterDDT query",
        "func": "return global.get(\"query\").between(4400, 4483,\"allInverterDDT\");\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1245,
        "wires": [
            [
                "89ec3e26ebc5ea38"
            ]
        ]
    },
    {
        "id": "89ec3e26ebc5ea38",
        "type": "link call",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "query PLC",
        "links": [
            "064df6995fe637f2"
        ],
        "linkType": "static",
        "timeout": "3",
        "x": 705,
        "y": 1275,
        "wires": [
            [
                "f60ed334182c339f"
            ]
        ]
    },
    {
        "id": "f7946e855cb7af23",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "poll",
        "props": [],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 305,
        "y": 1350,
        "wires": [
            [
                "77190d99789c8205"
            ]
        ]
    },
    {
        "id": "77190d99789c8205",
        "type": "q-gate",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "gate",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "100",
        "keepNewest": false,
        "qToggle": false,
        "persist": true,
        "storeName": "memory",
        "x": 430,
        "y": 1335,
        "wires": [
            [
                "5f7d9434ee851d46"
            ]
        ]
    },
    {
        "id": "751f5980939d113e",
        "type": "ui_switch",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "toggle polling",
        "label": "poll",
        "tooltip": "ricarica la tabella ad intervalli di 1 secondo",
        "group": "0333a97ebf4d364e",
        "order": 5,
        "width": "1",
        "height": "2",
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 285,
        "y": 1305,
        "wires": [
            [
                "77190d99789c8205"
            ]
        ]
    },
    {
        "id": "3c0c7d2ea6d76d9f",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "allInverterDDTTable",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1195,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "912b13320bc74a21",
        "type": "rbe",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 1035,
        "y": 1440,
        "wires": [
            [
                "3c0c7d2ea6d76d9f"
            ]
        ],
        "l": false
    },
    {
        "id": "f49802da0ea96466",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1095,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a2d84d711435defe",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "onStartup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 150,
        "y": 1365,
        "wires": [
            [
                "751f5980939d113e",
                "a387a9d3ceb733c8"
            ]
        ]
    },
    {
        "id": "a387a9d3ceb733c8",
        "type": "ui_multistate_switch",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "",
        "group": "0333a97ebf4d364e",
        "order": 6,
        "width": 0,
        "height": 1,
        "label": "switch",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Option 0",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Option 1",
                "value": "polling",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 290,
        "y": 1410,
        "wires": [
            [
                "77190d99789c8205"
            ]
        ]
    },
    {
        "id": "eb4ab9c687c85a83",
        "type": "inject",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "poll",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 505,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "8394e156f1e2488e",
        "type": "debug",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1305,
        "y": 1350,
        "wires": []
    },
    {
        "id": "830ffb7ad83476f7",
        "type": "link in",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "allInverterDDT table",
        "links": [
            "f7aa3a5ee94581d8",
            "465a56cb5ae37a7b"
        ],
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "5f7d9434ee851d46"
            ]
        ]
    },
    {
        "id": "aa246ddee430ee27",
        "type": "comment",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "Tabella DDT inverter, 25x24",
        "info": "",
        "x": 315,
        "y": 1140,
        "wires": []
    },
    {
        "id": "35e1d011498c72cd",
        "type": "link call",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "ffe7d6539591cabf",
        "name": "map & merge",
        "links": [
            "f6905ffb8eab6a25"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 905,
        "y": 1350,
        "wires": [
            [
                "3a58a38948ea94e8",
                "f49802da0ea96466",
                "c5220d97a1ee9a7d"
            ]
        ]
    },
    {
        "id": "b116d599b6b0916d",
        "type": "file in",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "7e5e3a6761c37063",
        "name": "readAsSingleString",
        "filename": ".\\modello export dati plc inverter.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 665,
        "y": 1350,
        "wires": [
            [
                "f1ac1cecd9de5f7a"
            ]
        ]
    },
    {
        "id": "f1ac1cecd9de5f7a",
        "type": "json",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "7e5e3a6761c37063",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 776,
        "y": 1350,
        "wires": [
            [
                "35e1d011498c72cd"
            ]
        ],
        "l": false
    },
    {
        "id": "4c4668d1d8f3b4a4",
        "type": "comment",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "7e5e3a6761c37063",
        "name": "export integrale tabella DDT plc",
        "info": "",
        "x": 560,
        "y": 1350,
        "wires": [],
        "l": false
    },
    {
        "id": "c5220d97a1ee9a7d",
        "type": "change",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "140b055fd622ecf2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "inverter",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 1275,
        "wires": [
            [
                "7905b0dc5437c385"
            ]
        ],
        "l": false
    },
    {
        "id": "7905b0dc5437c385",
        "type": "link out",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "140b055fd622ecf2",
        "name": "warnOnChange",
        "mode": "link",
        "links": [
            "e16f5eb91fb5c4b4"
        ],
        "x": 1160,
        "y": 1275,
        "wires": [],
        "l": true
    },
    {
        "id": "1df35f685bbae5dc",
        "type": "link in",
        "z": "f325c0384ffbb0ed",
        "d": true,
        "g": "140b055fd622ecf2",
        "name": "link in 3",
        "links": [
            "732e9e9a5be95374"
        ],
        "x": 1260,
        "y": 1275,
        "wires": [
            []
        ]
    },
    {
        "id": "d22b28f7a5a9e961",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "19c8462c25c660b7",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1545,
        "y": 400,
        "wires": [],
        "l": true
    },
    {
        "id": "8e1e7922b86d42b2",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "46fc2b5540748ef7"
        ],
        "x": 1595,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "98dae3f7590e7f11",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "30474f067da09c85"
        ],
        "x": 195,
        "y": 560,
        "wires": [
            [
                "a83660b5da3a1451"
            ]
        ],
        "l": true
    },
    {
        "id": "ee4223c8a1b99306",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "d80ffbbc4fa48591",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1585,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "0240d02cf78bf36e",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "78baa1a61204055e"
        ],
        "x": 1635,
        "y": 620,
        "wires": [],
        "l": true
    },
    {
        "id": "8117948127f422da",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "15b5d9fa5b38b7df",
            "2decd0f9254e0e8c"
        ],
        "x": 195,
        "y": 480,
        "wires": [
            [
                "a83660b5da3a1451"
            ]
        ],
        "l": true
    },
    {
        "id": "65865d131de15381",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "5b58b2a9e2e64a97",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1625,
        "y": 320,
        "wires": [],
        "l": true
    },
    {
        "id": "9cb4af547e388109",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "b9822e2ffe31fd72"
        ],
        "x": 1675,
        "y": 660,
        "wires": [],
        "l": true
    },
    {
        "id": "1c1df7025fd07a24",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "name": "emuWrite in",
        "links": [
            "15b5d9fa5b38b7df"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "a83660b5da3a1451"
            ]
        ],
        "l": true
    },
    {
        "id": "454cf93fb55a37e1",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "6f1ada98f5867046",
        "name": "parse status",
        "func": "\nfunction isLost(status) {\n    return status.fill == \"red\";\n}\n\nfunction isWarn(status){\n    return status.fill == \"orange\";\n}\n\nfunction isOk(status) {\n    return status.fill == \"green\"; //!isWarn(status) && !isLost(status);\n}\n\n\nif(msg.origin==\"prodExc\")\n    context.set(\"prodExc\", msg.status)\nelse\n    context.set(\"status\", msg.status)\nvar status = context.get(\"status\");\nvar prodExc= context.get(\"prodExc\");\n//node.warn({pr:prodExc,st:status});\n\nif (isLost(status) || isLost(prodExc)) {\n    msg.payload=false;\n    return msg;\n}\nelse if (isLost(status) || isLost(prodExc)) {\n    msg.payload = \"warn\";\n    return msg;\n}\nelse if(isOk(status) && isOk(prodExc)){\n    msg.payload = true;\n    return msg;\n}\nelse\n    return //do nothing\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1220,
        "wires": [
            [
                "ac0360013a3bc782"
            ]
        ]
    },
    {
        "id": "bbc0b268ea1e4b05",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "6f1ada98f5867046",
        "name": "parseStatus in",
        "links": [],
        "x": 660,
        "y": 1220,
        "wires": [
            [
                "454cf93fb55a37e1"
            ]
        ]
    },
    {
        "id": "ac0360013a3bc782",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "6f1ada98f5867046",
        "name": "parseStatus out",
        "mode": "return",
        "links": [],
        "x": 960,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d559e44b39c59c2e",
        "type": "catch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "6f1ada98f5867046",
        "name": "",
        "scope": [
            "e9f7760b211c033c",
            "e9fdc5afa0d6118e",
            "0301b69a68603789",
            "541393527180c858"
        ],
        "uncaught": false,
        "x": 705,
        "y": 1180,
        "wires": [
            [
                "c9aaf418d77c2d5e"
            ]
        ]
    },
    {
        "id": "c9aaf418d77c2d5e",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "6f1ada98f5867046",
        "name": "silence timeouts",
        "func": "\n\nif(msg.error){\n    if (msg.error.message !== \"timeout\")\n        node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "b5204d64c998cc1f",
        "type": "catch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 225,
        "y": 200,
        "wires": [
            [
                "b1111e1050653ac6"
            ]
        ]
    },
    {
        "id": "21fbf510e4cbe1d4",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "catchAll",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4debd21357a01bc6",
        "type": "catch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "",
        "scope": [
            "72b60ffb9a9036c8",
            "c574f48718a26b27",
            "6a62873b4e46bbd8",
            "fa46f22c945d1162",
            "65e1635fb1a50f25",
            "8c85da46fbc8e587",
            "1d39b0493c890778",
            "bb7391ca11d722fd",
            "7d83617565c017a9",
            "acd875f06792ebdb",
            "fccb30e0df3fc793",
            "2b87988c4803288a",
            "2b22f5507fc948ea",
            "826c568d71f175e9",
            "fb3c93636d9d4498",
            "1d739def3f7e0e95",
            "4c242adc2dec9143",
            "cb4e0f858ada3771",
            "3181becab8101bec"
        ],
        "uncaught": false,
        "x": 205,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f3f7f42487fb6981",
        "type": "delay",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "120",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 575,
        "y": 240,
        "wires": [
            [
                "3cfd59900276e4c7"
            ]
        ]
    },
    {
        "id": "3cfd59900276e4c7",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "catchPlc",
        "func": "\n\nif(msg.error){\n    node.error({\"err\":msg.error.message,\"full\":msg});\n    //context.set(\"errorCc\", context.get(\"errorCc\")+1);\n}\nelse{\n    node.error(msg);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 745,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "69a6569de8f183d7",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "silence s7 endpoints timeouts (conn failed)",
        "info": "",
        "x": 325,
        "y": 95,
        "wires": []
    },
    {
        "id": "b1111e1050653ac6",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "a02047ec82263155",
        "name": "switch",
        "func": "\n\nif(msg.error && msg.error.source.type == \"s7 endpoint\" )\n    return [null,msg]   //to (silenced) catchPlc\nelse\n    return [msg,null]; //to catch all",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 200,
        "wires": [
            [
                "21fbf510e4cbe1d4"
            ],
            [
                "f3f7f42487fb6981"
            ]
        ]
    },
    {
        "id": "351ad075abbac370",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "start cycle",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1375,
        "y": 860,
        "wires": [
            [
                "e9c08298ab7f350b"
            ]
        ]
    },
    {
        "id": "552b1632304bcb80",
        "type": "delay",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1685,
        "y": 815,
        "wires": [
            [
                "351ad075abbac370"
            ]
        ]
    },
    {
        "id": "e9c08298ab7f350b",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "emulate plc",
        "func": "var state=context.get(\"state\")\n//node.warn({ input_state: state });\n\n//output template: [readOutput , cycleChanged , prod_writeRequest, status_writeRequest, prod_readRequest, status_readRequest ]\n    //readOutput    same as s7 //{} with var:value pairs\n    //cycleChanged  topic: \"cycleOff\" | \"cycleOn\"  payload:state\n    //prod_writeRequest     sends to plc prodExc s7\n    //status_writeRequest   sends to plc status s7    //only used in OnStart\n    //prod_readRequest      reads from plc prodExc s7\n    //status_readRequest    reads from plc status s7   //only used in OnStart\n\nfunction initData(){\n    return {\n        \"exc_id\":\"leftoverId\",\n        \"exc_status\":\"someStatus\",\n        \"exc_quantToDo\":17,\n        \"exc_quantProd\":3,\n        \"prod_cycleRun\":true,\n        \"prod_cycleNumber\":0,\n        \"prod_id\":\"\",\n        \"prod_quantProd\":0,\n        \"prod_esito\":true\n    }\n}\n\n\nif(!state)\n    state = initData();\n\n//emulate cycle routine state changes\nif(msg.action==\"start\"){\n    if(state.cycleRun)\n        node.error(\"received start when already running\");\n    node.warn(\"cycle began\");\n    //set state\n    state.cycleRun=true;\n    state.prod_cycleNumber++;\n    state.prod_id = state.exc_id;\n    state.exc_quantProd += state.prod_quantProd;\n    //emulate completion routine\n        //msg.eta = completion delay ms\n        //default delay = 5000ms\n    setTimeout((state)=>{\n        state.cycleRun=false;\n        //state.prod_id = \"\";\n        let esito = Math.rand() < 0.8;\n        if(esito){\n            \n        }\n        else{\n            state.exc_quantProd -= state.prod_quantProd;\n        }\n        node.warn({ esito: esito, cycle: state});\n        \n        //create write request for prodExc plc\n        let request={};\n        request.payload = new Array();\n        request.variable = new Array();\n        let keys=Object.keys(state);\n        let i=0;\n        for(let k of keys){\n            request.payload.push(state[k]);\n            request.variable.push(k);\n        }\n        node.send([ null, {topic:\"cycleOff\",payload:state}, request, null, null, null ]);\n    },msg.eta ?? 5000);\n}\n//read all //outputs an obj\nelse if(!msg.action || msg.action==\"readAll\"){\n    node.warn(\"readAll\");\n    node.send([state,null,null]);\n}\n//else write what's in variable\nelse if(msg.action == \"write\"){\n    let oldState=state; //#DBG\n    if (msg.variable.length) {\n        let i = 0;\n        for (let v of msg.variable) {\n            state[v] = msg.payload[i++];\n        }\n    }\n    node.warn({ written: msg, from: oldState, to: state });\n}\nelse{\n    node.warn({err:\"wth\",msg:msg});\n}\n\n\nnode.warn({output_state:state});\ncontext.set(\"state\",state);\n\n//create write request for plc\nlet request = {};\nrequest.payload = new Array();\nrequest.variable = new Array();\nlet keys = Object.keys(state);\nfor (let k of keys) {\n    request.payload.push(state[k]);\n    request.variable.push(k);\n}\nnode.send([null, (msg.action!=\"start\") ? null : { topic: \"cycleOn\", payload: state }, request, null, null, null]);",
        "outputs": 6,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\ncontext.set(\"status\", {\n    status_alife: false,\n    status_cycleActive: false,\n    status_emergency: false,\n    status_idraulicCmd: false,\n    status_idPressa: 1234,\n    status_pressPressata: 0,\n    status_tempPianoSup: 0,\n    status_tempPianoInf: 0\n});\n\n\n    //generate status changes\nlet id=setInterval(()=>{\n    let last=context.get(\"status\");\n    if(!last)\n        node.error(\"context undefined\");\n\n    let status = {\n        \"status_alife\": !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random()*350,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    status.status_tempPianoSup =   Math.random() * (2 * status.status_pressPressata)  ;\n    status.status_tempPianoInf =   status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup  ;\n    \n    \n\n    //create write request for plc \n    let request = {};\n    request.payload = new Array();\n    request.variable = new Array();\n    let keys = Object.keys(status);\n    //node.warn({\"req keys\":keys});\n    for (let k of keys) {\n        //node.warn({s:status,\"k\":k,item:status[k]});\n        request.payload.push(status[k]);\n        request.variable.push(k);\n    }\n    \n    node.send([null, null, null,request,null])\n\n},10000);\n\ncontext.set(\"intervalId\",id); //cleared in \"On stop\"",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nclearTimeout(context.get(\"intervalId\"));\nnode.warn(\"timeout cleared\");",
        "libs": [],
        "x": 1605,
        "y": 905,
        "wires": [
            [],
            [
                "f37a0518b44c5219"
            ],
            [
                "8c85da46fbc8e587",
                "f04944e0439ccc47"
            ],
            [
                "1d39b0493c890778",
                "9cabc5e7732aff01"
            ],
            [
                "b524fe2e5e6aad80",
                "7e77562f0cc30659"
            ],
            [
                "b5ac12a94b58dff0",
                "37ea04af9df3d34f"
            ]
        ],
        "outputLabels": [
            "readOutput",
            "topic:cycleOn/cycleOff",
            "prodExc_writeRequest",
            "status_writeRequest",
            "prodExc_readRequest",
            "status_readRequest"
        ]
    },
    {
        "id": "f37a0518b44c5219",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "delete",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1545,
        "y": 815,
        "wires": [
            [
                "552b1632304bcb80"
            ]
        ]
    },
    {
        "id": "fa46f22c945d1162",
        "type": "s7 control",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "endpoint": "34ec8711cb2e9270",
        "function": "trigger",
        "name": "",
        "x": 2170,
        "y": 965,
        "wires": [
            [
                "82fd1d1191fd6dc3"
            ]
        ]
    },
    {
        "id": "65e1635fb1a50f25",
        "type": "s7 control",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "endpoint": "fa784b598becc58c",
        "function": "trigger",
        "name": "",
        "x": 2190,
        "y": 1010,
        "wires": [
            [
                "ec556ce00fbd23ad"
            ]
        ]
    },
    {
        "id": "8c85da46fbc8e587",
        "type": "s7 out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "endpoint": "34ec8711cb2e9270",
        "variable": "",
        "name": "",
        "x": 1930,
        "y": 860,
        "wires": []
    },
    {
        "id": "1d39b0493c890778",
        "type": "s7 out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "endpoint": "fa784b598becc58c",
        "variable": "",
        "name": "",
        "x": 1935,
        "y": 905,
        "wires": []
    },
    {
        "id": "81d3b5c8c04e7de4",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link in 4",
        "links": [
            "b524fe2e5e6aad80"
        ],
        "x": 1980,
        "y": 965,
        "wires": [
            [
                "fa46f22c945d1162"
            ]
        ]
    },
    {
        "id": "25a8041d1656d36e",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link in 5",
        "links": [
            "b5ac12a94b58dff0"
        ],
        "x": 1990,
        "y": 1010,
        "wires": [
            [
                "65e1635fb1a50f25"
            ]
        ]
    },
    {
        "id": "b779e74b5a16fa1b",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link in 6",
        "links": [
            "82fd1d1191fd6dc3",
            "ec556ce00fbd23ad"
        ],
        "x": 1475,
        "y": 935,
        "wires": [
            [
                "e9c08298ab7f350b"
            ]
        ]
    },
    {
        "id": "b524fe2e5e6aad80",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "81d3b5c8c04e7de4"
        ],
        "x": 1730,
        "y": 935,
        "wires": []
    },
    {
        "id": "b5ac12a94b58dff0",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "25a8041d1656d36e"
        ],
        "x": 1730,
        "y": 980,
        "wires": []
    },
    {
        "id": "82fd1d1191fd6dc3",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "b779e74b5a16fa1b"
        ],
        "x": 2355,
        "y": 965,
        "wires": []
    },
    {
        "id": "ec556ce00fbd23ad",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "b779e74b5a16fa1b"
        ],
        "x": 2380,
        "y": 1010,
        "wires": []
    },
    {
        "id": "7a404f64ad01274d",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "utility: emulate plc",
        "info": "",
        "x": 1370,
        "y": 785,
        "wires": []
    },
    {
        "id": "1caf9f4b81091c0d",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1295,
        "y": 920,
        "wires": [
            [
                "351ad075abbac370"
            ]
        ]
    },
    {
        "id": "f04944e0439ccc47",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2105,
        "y": 860,
        "wires": []
    },
    {
        "id": "7e77562f0cc30659",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1835,
        "y": 965,
        "wires": []
    },
    {
        "id": "9cabc5e7732aff01",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 905,
        "wires": []
    },
    {
        "id": "37ea04af9df3d34f",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "fc6c8637d9b4aad0",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1835,
        "y": 1010,
        "wires": []
    },
    {
        "id": "d0d35188ca977ce0",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "6468e314d57e838e",
        "name": "plc pressa1",
        "info": "",
        "x": 205,
        "y": 1320,
        "wires": []
    },
    {
        "id": "c46b98a862a1ab60",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "sort data by press",
        "property": "press",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pressa1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pressa4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 515,
        "y": 860,
        "wires": [
            [
                "41df5591bfa012dd"
            ],
            [
                "ffe8c4b38dc5356f"
            ],
            [
                "cbee46675b660f6a"
            ],
            [
                "bf7e73d0cd5dbe88"
            ],
            [
                "c82c903f9464cdcc"
            ]
        ]
    },
    {
        "id": "c7e08d3cbb0142be",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "mixed sendToPressRequests in",
        "links": [
            "abe96bc7d7fbc506",
            "c30ca4565e0d218f",
            "7c8bd303c63bc52d"
        ],
        "x": 255,
        "y": 860,
        "wires": [
            [
                "c46b98a862a1ab60"
            ]
        ],
        "l": true
    },
    {
        "id": "41df5591bfa012dd",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "pressa1 sendToPressRequests out",
        "mode": "link",
        "links": [
            "fbeadcead2a7ca1c"
        ],
        "x": 680,
        "y": 780,
        "wires": []
    },
    {
        "id": "c82c903f9464cdcc",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "error",
        "func": "node.error({ err: \"unknown press in mixed sort\", press: msg.press, msg: msg });\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"gray\", shape: \"ring\", text: \"\" });\ncontext.set(\"outCc\", 0);\ncontext.set(\"errorCc\", 0);",
        "finalize": "",
        "libs": [],
        "x": 715,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "ffe8c4b38dc5356f",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "pressa2 sendToPressRequests out",
        "mode": "link",
        "links": [
            "e2e60c28672cbced",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 680,
        "y": 820,
        "wires": []
    },
    {
        "id": "cbee46675b660f6a",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "pressa3 sendToPressRequests out",
        "mode": "link",
        "links": [
            "8e812a9c88b84904",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 680,
        "y": 860,
        "wires": []
    },
    {
        "id": "bf7e73d0cd5dbe88",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "pressa4 sendToPressRequests out",
        "mode": "link",
        "links": [
            "e011e9b0ec37153c",
            "258c1b1d56e1d332",
            "c623711bf916f14f",
            "7d2abe51be09432b",
            "2f654a500825a6c9",
            "da265b4fe1196f55"
        ],
        "x": 680,
        "y": 900,
        "wires": []
    },
    {
        "id": "49087488e8ed7662",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "3d77674313c033de",
        "name": "sort press for sendToPressRequests",
        "info": "",
        "x": 285,
        "y": 780,
        "wires": []
    },
    {
        "id": "bd6109d96baea39b",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "utility: emulate plc self-contained, halfworking",
        "info": "",
        "x": 505,
        "y": 360,
        "wires": []
    },
    {
        "id": "c995137d4d361008",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "emulate prodExc plc",
        "func": "var state=context.get(\"state\");\n//output template: [readOutput , cycleChanged , selfRequests]\n    //readOutput    same as s7 //{} with var:value pairs\n    //cycleChanged  topic: \"cycleOff\" | \"cycleOn\"  payload:state\n    //selfRequests  sends to this node\n    //readStatusOutput\n\nfunction newData(){\n    return {\n        \"genCtrl\":Math.random(),\n        \"exc_id\":\"pippo\",\n        \"exc_status\":3,\n        \"exc_quantToDo\":17,\n        \"exc_quantProd\":18,\n        \"prod_cycleRun\":false,\n        \"prod_cycleNumber\":0,\n        \"prod_id\":\"\",\n        \"prod_quantProd\":0,\n        \"prod_esito\":false\n    }\n}\n\nfunction statData(last){\n    let status={\n        \"status_alife\": !last ? true : !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": !last ? false : last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": !last ? false : last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random()*240,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    let percPress = status.pressPressata/240*100;\n    status.status_tempPianoSup =   (200-200/6 + Math.random() * 2*200/6) * percPress;\n    status.status_tempPianoInf =   (200-200/6 + Math.random() * 2*200/6) * percPress;\n    //status.status_tempPianoSup =   Math.random() * (2 * status.status_pressPressata)  ;\n    //status.status_tempPianoInf =   status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup  ;\n    return status;\n}\nfunction newRandData(prod_cycleRun=true){\n    let d=newData();\n}\n\n//one-time init\nif(state === undefined){\n    state = newData();\n    /*\n    let status = statData();\n    for(let k in status)\n        state[k]=status[k];\n\n    */\n}\n\n\nif(msg.action == \"poll\"){\n    /*\n    let allStatusOutput = {payload:{}};\n    let allProdExcOutput = {payload:{}};\n    for(let k in state){\n        if(/^status_/.test(k))\n            allStatusOutput.payload[k]=state[k];\n        else\n            allProdExcOutput.payload[k] = state[k];\n    }\n    node.send([null, null, allProdExcOutput,allStatusOutput])\n    */\n}\n//emulate cycle state changes\nelse if(msg.action==\"start\"){\n    if(state.prod_cycleRun)\n        node.error(\"received start when already running\");\n    //set state\n    state.prod_cycleRun=true;\n    state.prod_cycleNumber++;\n    state.prod_id = state.exc_id;\n    state.exc_status = 2;\n    state.prod_quantProd = 2;\n    state.exc_quantProd += state.prod_quantProd;\n    //emulate completion routine\n        //msg.eta = completion delay ms\n        //default delay = 5000ms\n    setTimeout((state)=>{\n        node.warn(\"cycleOff\");\n        state.prod_cycleRun=false;\n        \n        //state.prod_id = \"\";\n        let esito = Math.random() < 0.8;\n        if(esito){\n            state.exc_status = 4; // 'C'\n        }\n        else{\n            state.exc_status = 3; // 'P'\n            state.exc_quantProd -= state.prod_quantProd;\n        }\n        node.warn(esito);\n        let request={};\n        request.payload = new Array();\n        request.variable = new Array();\n        //create write request for this node //avoid async shenanigans from context.set()\n        for(let k in state){\n            request.payload.push(state[k]);\n            request.variable.push(k);\n        }\n        request.action=\"writeAll\";\n        /*\n        var allProdExc={};\n        for (let k in state) {\n            if (!/^status_/.test(k))\n                allProdExc[k] = state[k];\n        }\n        */\n        node.send([{topic:\"allProdExc\",payload:state},{topic:\"cycleOff\",payload:state},request])\n    },msg.eta ?? 5000,state);\n    /*\n    var allProdExc = {};\n    for (let k in state) {\n        if (!/^status_/.test(k))\n            allProdExc[k] = state[k];\n    }*/\n    node.warn(\"cycleOn\");\n    node.send([{topic:\"allProdExc\",payload:state}, null, null]);\n}\n//read all //outputs an obj\nelse if(!msg.action || msg.action==\"readAll\"){\n    let allStatusOutput = { payload:{} };\n    let allProdExcOutput = { payload: {} };\n\n    /*for(let k in state){\n        if(/^status_/.test(k))\n            allStatusOutput.payload[k]=state[k];\n        else\n            allProdExcOutput.payload[k] = state[k];\n    }*/\n    \n    msg.payload=state;\n    delete msg.action;\n\n    node.warn(\"readAll\");\n    node.send([msg,null,null]);\n}\nelse if (msg.action == \"writeAllStatus\") {\n    let status=context.get(\"status\");\n    if (msg.variable.length) {\n        //node.warn(\"writeAllStatus\");\n        for (let i = 0; i < msg.variable.length; i++) {\n            node.warn({ write: msg.payload[i], to: msg.variable[i] });\n            status[msg.variable[i]] = msg.payload[i];\n        }\n    }\n    context.set(\"status\",status);\n    node.warn({ statusGoneTo: status });\n}\n//else write what's in variable\nelse{\n    \n    if (msg.variable.length) {\n        //node.warn(\"writeAll\");\n        for (let i=0;i<msg.variable.length;i++) {\n            node.warn({write:msg.payload[i],to:msg.variable[i]});\n            state[msg.variable[i]] = msg.payload[i];\n        }\n    }\n    node.warn({stateGoneTo:state});\n}\n\n\ncontext.set(\"state\",state);",
        "outputs": 4,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n\ncontext.set(\"status\", {\n    status_alife: false,\n    status_cycleActive: false,\n    status_emergency: false,\n    status_idraulicCmd: false,\n    status_idPressa: 1234,\n    status_pressPressata: 0,\n    status_tempPianoSup: 0,\n    status_tempPianoInf: 0\n});\n\n\n//generate status changes\nlet id = setInterval(() => {\n    let last = context.get(\"state\") ?? context.get(\"status\");\n    if (!last)\n        node.error(\"context undefined\");\n\n    let status = {\n        \"status_alife\": !last.status_alife,\n        \"status_cycleActive\": false,\n        \"status_emergency\": last.status_emergency ? false : Math.random() < 0.2,\n        \"status_idraulicCmd\": last.status_idraulicCmd ? false : Math.random() < 0.5,\n        \"status_idPressa\": 1234,\n        \"status_pressPressata\": Math.random() * 350,\n        \"status_tempPianoSup\": 0, //Math.random() * (2*this.status_pressPressata),\n        \"status_tempPianoInf\": 0 //this.status_tempPianoSup - (1 / 3) * this.status_tempPianoInf + Math.random() * (2 / 3) * this.status_tempPianoInf\n    }\n    status.status_tempPianoSup = Math.random() * (2 * status.status_pressPressata);\n    status.status_tempPianoInf = status.status_tempPianoSup - (1 / 3) * status.status_tempPianoSup + Math.random() * (2 / 3) * status.status_tempPianoSup;\n\n    //create write request for this node\n    let request = {};\n    request.payload = new Array();\n    request.variable = new Array();\n    let keys = Object.keys(status);\n    //node.warn({\"req keys\":keys});\n    for (let k of keys) {\n        //node.warn({s:status,\"k\":k,item:status[k]});\n        request.payload.push(status[k]);\n        request.variable.push(k);\n    }\n    request.action=\"writeAllStatus\";\n    node.send([null, null, request,{payload:status}])\n\n}, 5000);\n\ncontext.set(\"intervalId\", id); //cleared in \"On stop\"\n\n",
        "finalize": "",
        "libs": [],
        "x": 815,
        "y": 495,
        "wires": [
            [
                "68103b2c84b029a5",
                "ef2a49517ea8e8ce",
                "d22b28f7a5a9e961",
                "ee4223c8a1b99306",
                "65865d131de15381"
            ],
            [
                "fa52f4b698761fb6"
            ],
            [
                "9111dea45f892157"
            ],
            [
                "21e833d404c37992",
                "47a51a5c770177f1",
                "8e1e7922b86d42b2",
                "0240d02cf78bf36e",
                "9cb4af547e388109"
            ]
        ],
        "outputLabels": [
            "readOutput",
            "topic:cycleOn/cycleOff",
            "to self",
            ""
        ]
    },
    {
        "id": "9111dea45f892157",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 795,
        "y": 580,
        "wires": [
            [
                "c995137d4d361008"
            ]
        ],
        "l": false
    },
    {
        "id": "45d520a6fb72eee7",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "start cycle",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "start",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 480,
        "wires": [
            [
                "c995137d4d361008"
            ]
        ]
    },
    {
        "id": "33c2c24b51f576c7",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "action:poll 10s",
        "props": [
            {
                "p": "action",
                "v": "poll",
                "vt": "str"
            }
        ],
        "repeat": "6",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 485,
        "y": 565,
        "wires": [
            [
                "c995137d4d361008"
            ]
        ]
    },
    {
        "id": "2b00129f3f91c856",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "action:readAll",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "readAll",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 575,
        "y": 610,
        "wires": [
            [
                "c995137d4d361008"
            ]
        ]
    },
    {
        "id": "a83660b5da3a1451",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "action:writeAll",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "writeAll",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 525,
        "wires": [
            [
                "c995137d4d361008"
            ]
        ]
    },
    {
        "id": "68103b2c84b029a5",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "emuRead out",
        "mode": "link",
        "links": [
            "b1ce79e818307751",
            "c9df124372e4a5f9",
            "284d8df6bb648126",
            "3738c04c23c1038b",
            "73055a1222614ac2",
            "b162e6deb85ce2d7",
            "9192eb3f994ea4da",
            "cc450c1afa66feec"
        ],
        "x": 1135,
        "y": 450,
        "wires": [],
        "l": true
    },
    {
        "id": "ef2a49517ea8e8ce",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "all prodExc with topic:prodExc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1205,
        "y": 480,
        "wires": []
    },
    {
        "id": "fa52f4b698761fb6",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 725,
        "y": 420,
        "wires": [
            [
                "c5ed6815fba11d03"
            ]
        ]
    },
    {
        "id": "21e833d404c37992",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "allStatus emuRead out",
        "mode": "link",
        "links": [
            "647159f3ed671018"
        ],
        "x": 1160,
        "y": 540,
        "wires": [],
        "l": true
    },
    {
        "id": "47a51a5c770177f1",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1125,
        "y": 570,
        "wires": []
    },
    {
        "id": "f8197dfe83065776",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 420,
        "y": 480,
        "wires": [
            [
                "45d520a6fb72eee7"
            ]
        ],
        "l": false
    },
    {
        "id": "d0e35598fdc88529",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "OnStartup3",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 410,
        "y": 420,
        "wires": [
            [
                "45d520a6fb72eee7"
            ]
        ]
    },
    {
        "id": "22bd8688afb73c9f",
        "type": "gate",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1005,
        "y": 420,
        "wires": [
            [
                "45d520a6fb72eee7"
            ]
        ],
        "l": false
    },
    {
        "id": "17746ac1098a88b0",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "emuReadAll in",
        "links": [],
        "x": 385,
        "y": 610,
        "wires": [
            [
                "2b00129f3f91c856"
            ]
        ],
        "l": true
    },
    {
        "id": "f428ef7f0a8a8a80",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 450,
        "y": 650,
        "wires": [
            [
                "2b00129f3f91c856"
            ]
        ],
        "l": false
    },
    {
        "id": "e085918b8aa8e446",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "emuWrite in",
        "links": [
            "b2bee83e7260211a",
            "504464c430ba7283",
            "c0a6f5a095ded7d3",
            "69b1ea7a62b8ffde",
            "a467d56466998dc7",
            "264c06f2fdf3b2df",
            "82ede1c062e87eb3",
            "d16297afbe03f8ba",
            "dd535bcb2b06deea",
            "15b5d9fa5b38b7df"
        ],
        "x": 380,
        "y": 525,
        "wires": [
            [
                "a83660b5da3a1451"
            ]
        ],
        "l": true
    },
    {
        "id": "c5ed6815fba11d03",
        "type": "delay",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 885,
        "y": 420,
        "wires": [
            [
                "22bd8688afb73c9f"
            ]
        ]
    },
    {
        "id": "870da2506eac28bc",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "toggle cycle loop",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "toggle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 875,
        "y": 375,
        "wires": [
            [
                "22bd8688afb73c9f"
            ]
        ]
    },
    {
        "id": "24b155b8ecaf80fd",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "22fa3a13397fe4f2",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 745,
        "y": 375,
        "wires": [
            [
                "870da2506eac28bc"
            ]
        ],
        "l": false
    },
    {
        "id": "72b60ffb9a9036c8",
        "type": "s7 in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "endpoint": "fa784b598becc58c",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "ifDiff -> all status 60s",
        "x": 265,
        "y": 1860,
        "wires": [
            [
                "4d725a406e8b7475"
            ]
        ]
    },
    {
        "id": "b90197333a8243e5",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "name": "pressa1 allStatus pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1815,
        "wires": []
    },
    {
        "id": "720243a5e49de53d",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "name": "split with topic:varName",
        "func": "\nlet keys=Object.keys(msg.payload);\n//node.warn(keys);\n    //from status_alife:true   to {topic:alife, payload:true}\nlet out=[];\nfor(let k of keys){\n    node.send({\n        topic:k.match(/\\w+_(.+)/)[1],\n        payload:msg.payload[k],\n    })\n    //out.push({\n    //     topic: k.match(/\\w+_(.+)/)[1],\n    //    payload: msg.payload[k],\n    //});\n}\n\n//node.warn(out);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 1860,
        "wires": [
            [
                "8c79e600376c46de"
            ]
        ]
    },
    {
        "id": "e521c584e11bfcc4",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "name": "poll status pressa1",
        "info": "",
        "x": 250,
        "y": 1815,
        "wires": []
    },
    {
        "id": "8c79e600376c46de",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "name": "pressa1_mixedDataIn_out",
        "mode": "link",
        "links": [
            "616b4fb31ab7fe25",
            "9890c53475b90fa6"
        ],
        "x": 880,
        "y": 1860,
        "wires": [],
        "l": true
    },
    {
        "id": "4d725a406e8b7475",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 425,
        "y": 1860,
        "wires": [
            [
                "b90197333a8243e5",
                "720243a5e49de53d"
            ]
        ],
        "l": false
    },
    {
        "id": "647159f3ed671018",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "df9088f254e94c5e",
        "name": "allStatus emuRead in",
        "links": [
            "21e833d404c37992",
            "46c2b8c68937078c",
            "dfb6b94f3d572af5"
        ],
        "x": 265,
        "y": 1905,
        "wires": [
            [
                "4d725a406e8b7475"
            ]
        ],
        "l": true
    },
    {
        "id": "f0334309524bc22b",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "exc_status",
        "property": "payload.exc_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 435,
        "y": 2490,
        "wires": [
            [
                "85bbcfb635da5688"
            ],
            [
                "6dd800ca3a398c60"
            ],
            [
                "85bbcfb635da5688"
            ],
            [
                "85bbcfb635da5688"
            ]
        ]
    },
    {
        "id": "9347d860a9df1cea",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "pressa1 allProdExc in",
        "links": [
            "35d354408fae7539"
        ],
        "x": 240,
        "y": 2490,
        "wires": [
            [
                "f0334309524bc22b"
            ]
        ],
        "l": true
    },
    {
        "id": "6dd800ca3a398c60",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 2475,
        "wires": [
            [
                "2bb00c70116db4b3"
            ]
        ]
    },
    {
        "id": "85bbcfb635da5688",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "open",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 2505,
        "wires": [
            [
                "2bb00c70116db4b3"
            ]
        ]
    },
    {
        "id": "a39c33d989cf670b",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "!= green",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 760,
        "y": 2380,
        "wires": [
            [
                "6dd800ca3a398c60"
            ]
        ]
    },
    {
        "id": "2bb00c70116db4b3",
        "type": "q-gate",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "keep last",
        "controlTopic": "control",
        "defaultState": "queueing",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": true,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 600,
        "y": 2565,
        "wires": [
            [
                "3c4bfe32b15bc405"
            ]
        ]
    },
    {
        "id": "f2784c01e5c99dc6",
        "type": "status",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "pressa1 connStatus",
        "scope": [
            "6a62873b4e46bbd8"
        ],
        "x": 565,
        "y": 2380,
        "wires": [
            [
                "a39c33d989cf670b"
            ]
        ]
    },
    {
        "id": "fbeadcead2a7ca1c",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "pressa1 sendToPressRequests in",
        "links": [
            "c90373ea81f269e7",
            "41df5591bfa012dd",
            "297375027392a9b4",
            "6b4639f59bf141a0",
            "2b4384d6ab15617e"
        ],
        "x": 315,
        "y": 2565,
        "wires": [
            [
                "2bb00c70116db4b3"
            ]
        ],
        "l": true
    },
    {
        "id": "3c4bfe32b15bc405",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "sendToPress requests",
        "func": "\n\nvar write;\n\n//load order in plc\nif(msg.action == \"load\"){\n    write = {\n        \"exc_quantProd\":msg.payload.quantProd,\n        \"exc_quantToDo\":msg.payload.quantToDo,\n        \"exc_status\": 0,\n        \"exc_id\":msg.payload.id\n    }\n}\n//clear plc with placeholder values\nelse if(msg.action == \"clear\"){\n    write = {\n        \"exc_quantProd\": 0,\n        \"exc_quantToDo\": 0,\n        \"exc_status\":0,\n        \"exc_id\": \"\"\n    }\n}\nelse if(msg.action == \"nothing\"){\n    return null;\n}\n\n//build s7 request\nlet request = { payload: [], variable: [] };\nfor (let k in write) {\n    request.payload.push(write[k]);\n    request.variable.push(k);\n}\n//send msg as feedback on 2nd channel\nreturn [request, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2565,
        "wires": [
            [
                "cdaf25d739c9fe5d",
                "b2bee83e7260211a",
                "80e89aead4ab3d75"
            ],
            [
                "81fd06535c53fa28"
            ]
        ]
    },
    {
        "id": "cdaf25d739c9fe5d",
        "type": "s7 out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "endpoint": "34ec8711cb2e9270",
        "variable": "",
        "name": "writeTo prodExc",
        "x": 1060,
        "y": 2535,
        "wires": []
    },
    {
        "id": "81fd06535c53fa28",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "pressa1 sendToPressRequest done out",
        "mode": "link",
        "links": [
            "65322cbc3d91d4f5",
            "a1ac077375ba231d",
            "ee7df6ca341a90cc"
        ],
        "x": 1130,
        "y": 2580,
        "wires": [],
        "l": true
    },
    {
        "id": "e31ca3afb2ea7f0b",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "sendToPress requests pressa1",
        "info": "",
        "x": 285,
        "y": 2385,
        "wires": []
    },
    {
        "id": "b2bee83e7260211a",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "emuWrite out",
        "mode": "link",
        "links": [
            "e085918b8aa8e446",
            "7ac6e5493f61d4cd",
            "e0e81e80da5f8816"
        ],
        "x": 1050,
        "y": 2490,
        "wires": [],
        "l": true
    },
    {
        "id": "80e89aead4ab3d75",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "write to prodExc pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1085,
        "y": 2460,
        "wires": []
    },
    {
        "id": "5b485b54db9fe1f2",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "pressa1 onConnIsOkChange in",
        "links": [
            "08d4c169c375e425"
        ],
        "x": 305,
        "y": 2425,
        "wires": [
            [
                "23871617ee198621"
            ]
        ],
        "l": true
    },
    {
        "id": "23871617ee198621",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "19899f2d110fd419",
        "name": "== false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 2425,
        "wires": [
            [
                "6dd800ca3a398c60"
            ],
            []
        ]
    },
    {
        "id": "35d354408fae7539",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "pressa1 allProdExc out",
        "mode": "link",
        "links": [
            "9347d860a9df1cea",
            "2ef2e1ec9ad18993"
        ],
        "x": 615,
        "y": 2205,
        "wires": [],
        "l": true
    },
    {
        "id": "6a62873b4e46bbd8",
        "type": "s7 in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "endpoint": "34ec8711cb2e9270",
        "mode": "all",
        "variable": "exc_id",
        "diff": false,
        "name": "all prodExc 10s",
        "x": 240,
        "y": 2145,
        "wires": [
            [
                "2c5766100f1b6b0b"
            ]
        ]
    },
    {
        "id": "9f86718937d29bba",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "trigger once per cycle",
        "func": "\nvar lastCycleIsRunning=context.get(\"lastCycleIsRunning\") ?? false;\nvar lastCycleNumber = context.get(\"lastCycleNumber\") ?? -1;\n\n//if (lastCycleNumber<=0)\n    //lastCycleNumber=flow.get(\"historyTable\")[0].cycleNum || -1; //table not defined outside its flow\n\n//on cycleRunning change\nlet cycleIsRunning = msg.payload.prod_cycleRun;\n//node.warn({lastCyc:lastCycleIsRunning,cyc:cycleIsRunning});\n\nif (lastCycleIsRunning != cycleIsRunning){\n    context.set(\"lastCycleIsRunning\",cycleIsRunning);\n    //on cycle beginning\n    if(cycleIsRunning){\n\n\n        node.send([msg,null]);\n    }\n    //on cycle end\n    else{\n\n\n        node.send([null, msg]);\n    }\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2100,
        "wires": [
            [
                "1c7d69ab9f66b8ca"
            ],
            [
                "178cc6bf43de6aad",
                "d331c13fa0d9ea1e"
            ]
        ],
        "outputLabels": [
            "cycleBeginning",
            "cycleEnding"
        ]
    },
    {
        "id": "89acac1fd8a887f1",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "all prodExc pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 605,
        "y": 2160,
        "wires": []
    },
    {
        "id": "12771038e847a88a",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_prodExc",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 615,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "e33aa7e7cbd97b4e",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_exc_status",
                "pt": "flow",
                "to": "payload.exc_status",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 2290,
        "wires": [
            []
        ]
    },
    {
        "id": "b1ce79e818307751",
        "type": "link in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "emuRead in",
        "links": [
            "68103b2c84b029a5",
            "e9413d634bd51052",
            "3f33a48033934063"
        ],
        "x": 245,
        "y": 2190,
        "wires": [
            [
                "2c5766100f1b6b0b"
            ]
        ],
        "l": true
    },
    {
        "id": "1c7d69ab9f66b8ca",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "pressa1 allProdExc onceOnCycleStart out",
        "mode": "link",
        "links": [],
        "x": 930,
        "y": 2085,
        "wires": [],
        "l": true
    },
    {
        "id": "178cc6bf43de6aad",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "pressa1 allProdExc onceOnCycleEnd out",
        "mode": "link",
        "links": [
            "9f767a4b86454460",
            "dc42f7c25233e317",
            "cf605b67dca1fd9a"
        ],
        "x": 930,
        "y": 2130,
        "wires": [],
        "l": true
    },
    {
        "id": "d331c13fa0d9ea1e",
        "type": "debug",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "oncePerCyc end pressa1 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 885,
        "y": 2175,
        "wires": []
    },
    {
        "id": "c1a586c2ed4a2cee",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "poll prodExc pressa1",
        "info": "",
        "x": 250,
        "y": 2010,
        "wires": []
    },
    {
        "id": "2c5766100f1b6b0b",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 2145,
        "wires": [
            [
                "35d354408fae7539",
                "9f86718937d29bba",
                "89acac1fd8a887f1",
                "12771038e847a88a",
                "e33aa7e7cbd97b4e",
                "17feef43ab700877"
            ]
        ],
        "l": false
    },
    {
        "id": "17feef43ab700877",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "716d4b0a2eeac322",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1_status",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 2250,
        "wires": [
            []
        ]
    },
    {
        "id": "3f570b4b27989310",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 400,
        "y": 1620,
        "wires": [
            [
                "85fe0215925f055b"
            ]
        ]
    },
    {
        "id": "85fe0215925f055b",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "payload true/false",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 1695,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5571157ca53f72d7",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 400,
        "y": 1650,
        "wires": [
            [
                "85fe0215925f055b"
            ]
        ]
    },
    {
        "id": "2f9978300a1d1790",
        "type": "switch",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 445,
        "y": 1695,
        "wires": [
            [
                "85fe0215925f055b"
            ]
        ],
        "l": false
    },
    {
        "id": "c574f48718a26b27",
        "type": "s7 in",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "endpoint": "34ec8711cb2e9270",
        "mode": "single",
        "variable": "prod_cycleRun",
        "diff": true,
        "name": "ifDifferent -> prod_cycleRun",
        "x": 295,
        "y": 1695,
        "wires": [
            [
                "2f9978300a1d1790"
            ]
        ]
    },
    {
        "id": "d884204c818a7421",
        "type": "status",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "pressa1_allProdExc",
        "scope": [
            "72b60ffb9a9036c8",
            "c574f48718a26b27"
        ],
        "x": 245,
        "y": 1470,
        "wires": [
            [
                "b1d2f477e488dda8",
                "0da23baee9865b59",
                "412e396b6f49d506"
            ]
        ]
    },
    {
        "id": "b1d2f477e488dda8",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "prodExc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 465,
        "y": 1470,
        "wires": [
            [
                "e9f7760b211c033c"
            ]
        ]
    },
    {
        "id": "0da23baee9865b59",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1440,
        "wires": [
            [
                "e9f7760b211c033c"
            ]
        ]
    },
    {
        "id": "412e396b6f49d506",
        "type": "function",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "send to status globals",
        "func": "\nif(msg.status && msg.status.fill && (typeof msg.status.fill) == \"string\")\n    return [{ payload: msg.status.fill }, { payload: msg.status.fill==\"green\" }]\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 1530,
        "wires": [
            [
                "7275e36794ea0351"
            ],
            [
                "14e38cde273d26cc"
            ]
        ],
        "l": false
    },
    {
        "id": "e9f7760b211c033c",
        "type": "link call",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "parse Status",
        "links": [
            "bbc0b268ea1e4b05"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 690,
        "y": 1455,
        "wires": [
            [
                "8e8d43ea58023819"
            ]
        ]
    },
    {
        "id": "b45436d6c32aec5b",
        "type": "status",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "pressa1_allStatus",
        "scope": [
            "c574f48718a26b27",
            "72b60ffb9a9036c8"
        ],
        "x": 245,
        "y": 1440,
        "wires": [
            [
                "0da23baee9865b59"
            ]
        ]
    },
    {
        "id": "ec925f9cc97d2a35",
        "type": "status",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "pressa1_allStatus",
        "scope": [
            "c574f48718a26b27",
            "72b60ffb9a9036c8"
        ],
        "x": 245,
        "y": 1530,
        "wires": [
            [
                "412e396b6f49d506"
            ]
        ]
    },
    {
        "id": "7275e36794ea0351",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnStatus",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1515,
        "wires": [
            [
                "b09126e2defac7b3"
            ]
        ]
    },
    {
        "id": "14e38cde273d26cc",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnIsOk",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1545,
        "wires": [
            [
                "08d4c169c375e425"
            ]
        ]
    },
    {
        "id": "8e8d43ea58023819",
        "type": "trigger",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "merge 300ms",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "300",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 865,
        "y": 1455,
        "wires": [
            [
                "a50d774300049060"
            ]
        ]
    },
    {
        "id": "b09126e2defac7b3",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "pressa1 onConnStatusChange out",
        "mode": "link",
        "links": [],
        "x": 875,
        "y": 1515,
        "wires": [],
        "l": true
    },
    {
        "id": "08d4c169c375e425",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "pressa1 onConnIsOkChange out",
        "mode": "link",
        "links": [
            "5b485b54db9fe1f2"
        ],
        "x": 875,
        "y": 1545,
        "wires": [],
        "l": true
    },
    {
        "id": "a50d774300049060",
        "type": "link out",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "pressa1_alife_dataIn_out",
        "mode": "link",
        "links": [
            "8ef946242380175e",
            "7446c855e9d2de4f"
        ],
        "x": 1085,
        "y": 1455,
        "wires": [],
        "l": true
    },
    {
        "id": "bc3b85c3a5989a53",
        "type": "inject",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "OnStartup0.1 setDefaults",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1195,
        "y": 1530,
        "wires": [
            [
                "8036e0640623c816",
                "c472dcc87f5170c8"
            ]
        ]
    },
    {
        "id": "8036e0640623c816",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnStatus",
                "pt": "global",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1465,
        "y": 1515,
        "wires": [
            []
        ]
    },
    {
        "id": "c472dcc87f5170c8",
        "type": "change",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pressa1ConnIsOk",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1455,
        "y": 1545,
        "wires": [
            []
        ]
    },
    {
        "id": "2180a1fb7230451e",
        "type": "comment",
        "z": "b9377575097a37a3",
        "d": true,
        "g": "f9ab78df7bf3b33e",
        "name": "track connection status pressa1",
        "info": "",
        "x": 315,
        "y": 1395,
        "wires": []
    }
]